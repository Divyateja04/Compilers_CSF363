Terminals unused in grammar

    NL
    INVALID_TOKEN


Grammar

    0 $accept: stmt $end

    1 stmt: PROGRAM_DECLARATION VARIABLE_DECLARATION BODY_OF_PROGRAM

    2 DATATYPE: INTEGER
    3         | REAL
    4         | BOOLEAN
    5         | CHAR

    6 RELOP: EQUAL
    7      | NOTEQUAL
    8      | LESS
    9      | LESSEQUAL
   10      | GREATER
   11      | GREATEREQUAL

   12 ARRAY_ADD_ON_ID: LBRACKET BETWEEN_BRACKETS RBRACKET

   13 BETWEEN_BRACKETS: INT_NUMBER
   14                 | IDENTIFIER
   15                 | IDENTIFIER ARRAY_ADD_ON_ID

   16 PROGRAM_DECLARATION: PROGRAM IDENTIFIER SEMICOLON

   17 VARIABLE_DECLARATION: VAR DECLARATION_LISTS
   18                     | VAR

   19 DECLARATION_LISTS: DECLARATION_LIST DECLARATION_LISTS
   20                  | DECLARATION_LIST

   21 DECLARATION_LIST: SINGLE_VARIABLE
   22                 | MULTIPLE_VARIABLE
   23                 | ARRAY_DECLARATION

   24 SINGLE_VARIABLE: IDENTIFIER COLON DATATYPE SEMICOLON

   25 MULTIPLE_VARIABLE: IDENTIFIER MORE_IDENTIFIERS COLON DATATYPE SEMICOLON

   26 MORE_IDENTIFIERS: COMMA IDENTIFIER MORE_IDENTIFIERS
   27                 | COMMA IDENTIFIER

   28 ARRAY_DECLARATION: IDENTIFIER COLON ARRAY LBRACKET INT_NUMBER ARRAY_DOT INT_NUMBER RBRACKET OF DATATYPE SEMICOLON

   29 BODY_OF_PROGRAM: BEGINK STATEMENTS END DOT

   30 STATEMENTS: STATEMENT STATEMENTS
   31           | STATEMENT

   32 STATEMENT: READ_STATEMENT
   33          | WRITE_STATEMENT
   34          | ASSIGNMENT_STATEMENT
   35          | CONDITIONAL_STATEMENT
   36          | LOOPING_STATEMENT

   37 READ_STATEMENT: READ LPAREN IDENTIFIER RPAREN SEMICOLON
   38               | READ LPAREN IDENTIFIER ARRAY_ADD_ON_ID RPAREN SEMICOLON

   39 WRITE_STATEMENT: WRITE LPAREN WRITE_IDENTIFIER_LIST RPAREN SEMICOLON
   40                | WRITE_LN LPAREN WRITE_IDENTIFIER_LIST RPAREN SEMICOLON

   41 WRITE_IDENTIFIER_LIST: WRITE_IDENTIFIER
   42                      | WRITE_IDENTIFIER COMMA WRITE_IDENTIFIER_LIST

   43 WRITE_IDENTIFIER: IDENTIFIER
   44                 | IDENTIFIER ARRAY_ADD_ON_ID
   45                 | STRING
   46                 | INT_NUMBER
   47                 | DECIMAL_NUMBER
   48                 | CHARACTER

   49 ASSIGNMENT_STATEMENT: IDENTIFIER COLON EQUAL ANY_EXPRESSION SEMICOLON
   50                     | IDENTIFIER ARRAY_ADD_ON_ID COLON EQUAL ANY_EXPRESSION SEMICOLON
   51                     | IDENTIFIER COLON EQUAL CHARACTER SEMICOLON

   52 $@1: ε

   53 $@2: ε

   54 CONDITIONAL_STATEMENT: IF $@1 ANY_EXPRESSION $@2 AFTER_IF_ANY_EXPR

   55 $@3: ε

   56 $@4: ε

   57 AFTER_IF_ANY_EXPR: THEN $@3 BODY_OF_CONDITIONAL $@4 AFTER_IF_THEN_BODY

   58 $@5: ε

   59 $@6: ε

   60 AFTER_IF_THEN_BODY: ELSE $@5 BODY_OF_CONDITIONAL $@6 SEMICOLON
   61                   | SEMICOLON

   62 BODY_OF_CONDITIONAL: BEGINK STATEMENTS_INSIDE_CONDITIONAL END

   63 STATEMENTS_INSIDE_CONDITIONAL: STATEMENT_INSIDE_CONDITIONAL STATEMENTS_INSIDE_CONDITIONAL
   64                              | STATEMENT_INSIDE_CONDITIONAL

   65 ANY_EXPRESSION: EXPRESSION_SEQUENCE
   66               | EXPRESSION_SEQUENCE RELOP EXPRESSION_SEQUENCE
   67               | LPAREN EXPRESSION_SEQUENCE RELOP EXPRESSION_SEQUENCE RPAREN
   68               | BOOLEAN_EXPRESSION_SEQUENCE

   69 EXPRESSION_SEQUENCE: TERM
   70                    | EXPRESSION_SEQUENCE PLUS EXPRESSION_SEQUENCE
   71                    | EXPRESSION_SEQUENCE MINUS EXPRESSION_SEQUENCE
   72                    | EXPRESSION_SEQUENCE MULTIPLY EXPRESSION_SEQUENCE
   73                    | EXPRESSION_SEQUENCE DIVIDE EXPRESSION_SEQUENCE
   74                    | EXPRESSION_SEQUENCE MOD EXPRESSION_SEQUENCE
   75                    | MINUS EXPRESSION_SEQUENCE
   76                    | LPAREN EXPRESSION_SEQUENCE RPAREN

   77 BOOLEAN_EXPRESSION_SEQUENCE: NOT ANY_EXPRESSION
   78                            | ANY_EXPRESSION AND ANY_EXPRESSION
   79                            | ANY_EXPRESSION OR ANY_EXPRESSION
   80                            | LPAREN BOOLEAN_EXPRESSION_SEQUENCE RPAREN

   81 TERM: IDENTIFIER
   82     | IDENTIFIER ARRAY_ADD_ON_ID
   83     | INT_NUMBER
   84     | DECIMAL_NUMBER

   85 STATEMENT_INSIDE_CONDITIONAL: READ_STATEMENT
   86                             | WRITE_STATEMENT
   87                             | ASSIGNMENT_STATEMENT
   88                             | LOOPING_STATEMENT

   89 LOOPING_STATEMENT: WHILE_LOOP
   90                  | FOR_LOOP

   91 $@7: ε

   92 $@8: ε

   93 $@9: ε

   94 WHILE_LOOP: WHILE $@7 ANY_EXPRESSION DO $@8 BODY_OF_LOOP $@9 SEMICOLON

   95 $@10: ε

   96 $@11: ε

   97 FOR_LOOP: FOR $@10 IDENTIFIER COLON EQUAL EXPRESSION_SEQUENCE $@11 AFTER_FOR_CONDITION

   98 $@12: ε

   99 $@13: ε

  100 $@14: ε

  101 AFTER_FOR_CONDITION: TO EXPRESSION_SEQUENCE $@12 DO $@13 BODY_OF_LOOP $@14 SEMICOLON

  102 $@15: ε

  103 $@16: ε

  104 $@17: ε

  105 AFTER_FOR_CONDITION: DOWNTO EXPRESSION_SEQUENCE $@15 DO $@16 BODY_OF_LOOP $@17 SEMICOLON

  106 BODY_OF_LOOP: BEGINK STATEMENTS_INSIDE_LOOP END

  107 STATEMENTS_INSIDE_LOOP: STATEMENT_INSIDE_LOOP STATEMENTS_INSIDE_LOOP
  108                       | STATEMENT_INSIDE_LOOP

  109 STATEMENT_INSIDE_LOOP: READ_STATEMENT
  110                      | WRITE_STATEMENT
  111                      | ASSIGNMENT_STATEMENT
  112                      | CONDITIONAL_STATEMENT


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    NL (258)
    PROGRAM (259) 16
    INTEGER (260) 2
    REAL (261) 3
    BEGINK (262) 29 62 106
    END (263) 29 62 106
    BOOLEAN (264) 4
    CHAR (265) 5
    IF (266) 54
    ELSE (267) 60
    TO (268) 101
    DOWNTO (269) 105
    VAR (270) 17 18
    ARRAY (271) 28
    FOR (272) 97
    WHILE (273) 94
    DO (274) 94 101 105
    NOT (275) 77
    AND (276) 78
    OR (277) 79
    READ (278) 37 38
    WRITE (279) 39
    WRITE_LN (280) 40
    ARRAY_DOT (281) 28
    PLUS (282) 70
    MINUS (283) 71 75
    MULTIPLY (284) 72
    DIVIDE (285) 73
    MOD (286) 74
    EQUAL (287) 6 49 50 51 97
    LESS (288) 8
    GREATER (289) 10
    LESSEQUAL (290) 9
    GREATEREQUAL (291) 11
    NOTEQUAL (292) 7
    INT_NUMBER <data> (293) 13 28 46 83
    DECIMAL_NUMBER <data> (294) 47 84
    IDENTIFIER <data> (295) 14 15 16 24 25 26 27 28 37 38 43 44 49 50 51 81 82 97
    SEMICOLON (296) 16 24 25 28 37 38 39 40 49 50 51 60 61 94 101 105
    COMMA (297) 26 27 42
    COLON (298) 24 25 28 49 50 51 97
    DOT (299) 29
    LPAREN (300) 37 38 39 40 67 76 80
    RPAREN (301) 37 38 39 40 67 76 80
    LBRACKET (302) 12 28
    RBRACKET (303) 12 28
    THEN (304) 57
    OF (305) 28
    INVALID_TOKEN (306)
    STRING <data> (307) 45
    CHARACTER <data> (308) 48 51


Nonterminals, with rules where they appear

    $accept (54)
        on left: 0
    stmt (55)
        on left: 1
        on right: 0
    DATATYPE (56)
        on left: 2 3 4 5
        on right: 24 25 28
    RELOP (57)
        on left: 6 7 8 9 10 11
        on right: 66 67
    ARRAY_ADD_ON_ID (58)
        on left: 12
        on right: 15 38 44 50 82
    BETWEEN_BRACKETS (59)
        on left: 13 14 15
        on right: 12
    PROGRAM_DECLARATION (60)
        on left: 16
        on right: 1
    VARIABLE_DECLARATION (61)
        on left: 17 18
        on right: 1
    DECLARATION_LISTS (62)
        on left: 19 20
        on right: 17 19
    DECLARATION_LIST (63)
        on left: 21 22 23
        on right: 19 20
    SINGLE_VARIABLE (64)
        on left: 24
        on right: 21
    MULTIPLE_VARIABLE (65)
        on left: 25
        on right: 22
    MORE_IDENTIFIERS (66)
        on left: 26 27
        on right: 25 26
    ARRAY_DECLARATION (67)
        on left: 28
        on right: 23
    BODY_OF_PROGRAM (68)
        on left: 29
        on right: 1
    STATEMENTS (69)
        on left: 30 31
        on right: 29 30
    STATEMENT (70)
        on left: 32 33 34 35 36
        on right: 30 31
    READ_STATEMENT (71)
        on left: 37 38
        on right: 32 85 109
    WRITE_STATEMENT (72)
        on left: 39 40
        on right: 33 86 110
    WRITE_IDENTIFIER_LIST (73)
        on left: 41 42
        on right: 39 40 42
    WRITE_IDENTIFIER (74)
        on left: 43 44 45 46 47 48
        on right: 41 42
    ASSIGNMENT_STATEMENT (75)
        on left: 49 50 51
        on right: 34 87 111
    CONDITIONAL_STATEMENT (76)
        on left: 54
        on right: 35 112
    $@1 (77)
        on left: 52
        on right: 54
    $@2 (78)
        on left: 53
        on right: 54
    AFTER_IF_ANY_EXPR (79)
        on left: 57
        on right: 54
    $@3 (80)
        on left: 55
        on right: 57
    $@4 (81)
        on left: 56
        on right: 57
    AFTER_IF_THEN_BODY (82)
        on left: 60 61
        on right: 57
    $@5 (83)
        on left: 58
        on right: 60
    $@6 (84)
        on left: 59
        on right: 60
    BODY_OF_CONDITIONAL (85)
        on left: 62
        on right: 57 60
    STATEMENTS_INSIDE_CONDITIONAL (86)
        on left: 63 64
        on right: 62 63
    ANY_EXPRESSION (87)
        on left: 65 66 67 68
        on right: 49 50 54 77 78 79 94
    EXPRESSION_SEQUENCE (88)
        on left: 69 70 71 72 73 74 75 76
        on right: 65 66 67 70 71 72 73 74 75 76 97 101 105
    BOOLEAN_EXPRESSION_SEQUENCE (89)
        on left: 77 78 79 80
        on right: 68 80
    TERM (90)
        on left: 81 82 83 84
        on right: 69
    STATEMENT_INSIDE_CONDITIONAL (91)
        on left: 85 86 87 88
        on right: 63 64
    LOOPING_STATEMENT (92)
        on left: 89 90
        on right: 36 88
    WHILE_LOOP (93)
        on left: 94
        on right: 89
    $@7 (94)
        on left: 91
        on right: 94
    $@8 (95)
        on left: 92
        on right: 94
    $@9 (96)
        on left: 93
        on right: 94
    FOR_LOOP (97)
        on left: 97
        on right: 90
    $@10 (98)
        on left: 95
        on right: 97
    $@11 (99)
        on left: 96
        on right: 97
    AFTER_FOR_CONDITION (100)
        on left: 101 105
        on right: 97
    $@12 (101)
        on left: 98
        on right: 101
    $@13 (102)
        on left: 99
        on right: 101
    $@14 (103)
        on left: 100
        on right: 101
    $@15 (104)
        on left: 102
        on right: 105
    $@16 (105)
        on left: 103
        on right: 105
    $@17 (106)
        on left: 104
        on right: 105
    BODY_OF_LOOP (107)
        on left: 106
        on right: 94 101 105
    STATEMENTS_INSIDE_LOOP (108)
        on left: 107 108
        on right: 106 107
    STATEMENT_INSIDE_LOOP (109)
        on left: 109 110 111 112
        on right: 107 108


State 0

    0 $accept: • stmt $end

    PROGRAM  shift, and go to state 1

    stmt                 go to state 2
    PROGRAM_DECLARATION  go to state 3


State 1

   16 PROGRAM_DECLARATION: PROGRAM • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 4


State 2

    0 $accept: stmt • $end

    $end  shift, and go to state 5


State 3

    1 stmt: PROGRAM_DECLARATION • VARIABLE_DECLARATION BODY_OF_PROGRAM

    VAR  shift, and go to state 6

    VARIABLE_DECLARATION  go to state 7


State 4

   16 PROGRAM_DECLARATION: PROGRAM IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 8


State 5

    0 $accept: stmt $end •

    $default  accept


State 6

   17 VARIABLE_DECLARATION: VAR • DECLARATION_LISTS
   18                     | VAR •

    IDENTIFIER  shift, and go to state 9

    $default  reduce using rule 18 (VARIABLE_DECLARATION)

    DECLARATION_LISTS  go to state 10
    DECLARATION_LIST   go to state 11
    SINGLE_VARIABLE    go to state 12
    MULTIPLE_VARIABLE  go to state 13
    ARRAY_DECLARATION  go to state 14


State 7

    1 stmt: PROGRAM_DECLARATION VARIABLE_DECLARATION • BODY_OF_PROGRAM

    BEGINK  shift, and go to state 15

    BODY_OF_PROGRAM  go to state 16


State 8

   16 PROGRAM_DECLARATION: PROGRAM IDENTIFIER SEMICOLON •

    $default  reduce using rule 16 (PROGRAM_DECLARATION)


State 9

   24 SINGLE_VARIABLE: IDENTIFIER • COLON DATATYPE SEMICOLON
   25 MULTIPLE_VARIABLE: IDENTIFIER • MORE_IDENTIFIERS COLON DATATYPE SEMICOLON
   28 ARRAY_DECLARATION: IDENTIFIER • COLON ARRAY LBRACKET INT_NUMBER ARRAY_DOT INT_NUMBER RBRACKET OF DATATYPE SEMICOLON

    COMMA  shift, and go to state 17
    COLON  shift, and go to state 18

    MORE_IDENTIFIERS  go to state 19


State 10

   17 VARIABLE_DECLARATION: VAR DECLARATION_LISTS •

    $default  reduce using rule 17 (VARIABLE_DECLARATION)


State 11

   19 DECLARATION_LISTS: DECLARATION_LIST • DECLARATION_LISTS
   20                  | DECLARATION_LIST •

    IDENTIFIER  shift, and go to state 9

    $default  reduce using rule 20 (DECLARATION_LISTS)

    DECLARATION_LISTS  go to state 20
    DECLARATION_LIST   go to state 11
    SINGLE_VARIABLE    go to state 12
    MULTIPLE_VARIABLE  go to state 13
    ARRAY_DECLARATION  go to state 14


State 12

   21 DECLARATION_LIST: SINGLE_VARIABLE •

    $default  reduce using rule 21 (DECLARATION_LIST)


State 13

   22 DECLARATION_LIST: MULTIPLE_VARIABLE •

    $default  reduce using rule 22 (DECLARATION_LIST)


State 14

   23 DECLARATION_LIST: ARRAY_DECLARATION •

    $default  reduce using rule 23 (DECLARATION_LIST)


State 15

   29 BODY_OF_PROGRAM: BEGINK • STATEMENTS END DOT

    IF          shift, and go to state 21
    FOR         shift, and go to state 22
    WHILE       shift, and go to state 23
    READ        shift, and go to state 24
    WRITE       shift, and go to state 25
    WRITE_LN    shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    STATEMENTS             go to state 28
    STATEMENT              go to state 29
    READ_STATEMENT         go to state 30
    WRITE_STATEMENT        go to state 31
    ASSIGNMENT_STATEMENT   go to state 32
    CONDITIONAL_STATEMENT  go to state 33
    LOOPING_STATEMENT      go to state 34
    WHILE_LOOP             go to state 35
    FOR_LOOP               go to state 36


State 16

    1 stmt: PROGRAM_DECLARATION VARIABLE_DECLARATION BODY_OF_PROGRAM •

    $default  reduce using rule 1 (stmt)


State 17

   26 MORE_IDENTIFIERS: COMMA • IDENTIFIER MORE_IDENTIFIERS
   27                 | COMMA • IDENTIFIER

    IDENTIFIER  shift, and go to state 37


State 18

   24 SINGLE_VARIABLE: IDENTIFIER COLON • DATATYPE SEMICOLON
   28 ARRAY_DECLARATION: IDENTIFIER COLON • ARRAY LBRACKET INT_NUMBER ARRAY_DOT INT_NUMBER RBRACKET OF DATATYPE SEMICOLON

    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39
    BOOLEAN  shift, and go to state 40
    CHAR     shift, and go to state 41
    ARRAY    shift, and go to state 42

    DATATYPE  go to state 43


State 19

   25 MULTIPLE_VARIABLE: IDENTIFIER MORE_IDENTIFIERS • COLON DATATYPE SEMICOLON

    COLON  shift, and go to state 44


State 20

   19 DECLARATION_LISTS: DECLARATION_LIST DECLARATION_LISTS •

    $default  reduce using rule 19 (DECLARATION_LISTS)


State 21

   54 CONDITIONAL_STATEMENT: IF • $@1 ANY_EXPRESSION $@2 AFTER_IF_ANY_EXPR

    $default  reduce using rule 52 ($@1)

    $@1  go to state 45


State 22

   97 FOR_LOOP: FOR • $@10 IDENTIFIER COLON EQUAL EXPRESSION_SEQUENCE $@11 AFTER_FOR_CONDITION

    $default  reduce using rule 95 ($@10)

    $@10  go to state 46


State 23

   94 WHILE_LOOP: WHILE • $@7 ANY_EXPRESSION DO $@8 BODY_OF_LOOP $@9 SEMICOLON

    $default  reduce using rule 91 ($@7)

    $@7  go to state 47


State 24

   37 READ_STATEMENT: READ • LPAREN IDENTIFIER RPAREN SEMICOLON
   38               | READ • LPAREN IDENTIFIER ARRAY_ADD_ON_ID RPAREN SEMICOLON

    LPAREN  shift, and go to state 48


State 25

   39 WRITE_STATEMENT: WRITE • LPAREN WRITE_IDENTIFIER_LIST RPAREN SEMICOLON

    LPAREN  shift, and go to state 49


State 26

   40 WRITE_STATEMENT: WRITE_LN • LPAREN WRITE_IDENTIFIER_LIST RPAREN SEMICOLON

    LPAREN  shift, and go to state 50


State 27

   49 ASSIGNMENT_STATEMENT: IDENTIFIER • COLON EQUAL ANY_EXPRESSION SEMICOLON
   50                     | IDENTIFIER • ARRAY_ADD_ON_ID COLON EQUAL ANY_EXPRESSION SEMICOLON
   51                     | IDENTIFIER • COLON EQUAL CHARACTER SEMICOLON

    COLON     shift, and go to state 51
    LBRACKET  shift, and go to state 52

    ARRAY_ADD_ON_ID  go to state 53


State 28

   29 BODY_OF_PROGRAM: BEGINK STATEMENTS • END DOT

    END  shift, and go to state 54


State 29

   30 STATEMENTS: STATEMENT • STATEMENTS
   31           | STATEMENT •

    IF          shift, and go to state 21
    FOR         shift, and go to state 22
    WHILE       shift, and go to state 23
    READ        shift, and go to state 24
    WRITE       shift, and go to state 25
    WRITE_LN    shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 31 (STATEMENTS)

    STATEMENTS             go to state 55
    STATEMENT              go to state 29
    READ_STATEMENT         go to state 30
    WRITE_STATEMENT        go to state 31
    ASSIGNMENT_STATEMENT   go to state 32
    CONDITIONAL_STATEMENT  go to state 33
    LOOPING_STATEMENT      go to state 34
    WHILE_LOOP             go to state 35
    FOR_LOOP               go to state 36


State 30

   32 STATEMENT: READ_STATEMENT •

    $default  reduce using rule 32 (STATEMENT)


State 31

   33 STATEMENT: WRITE_STATEMENT •

    $default  reduce using rule 33 (STATEMENT)


State 32

   34 STATEMENT: ASSIGNMENT_STATEMENT •

    $default  reduce using rule 34 (STATEMENT)


State 33

   35 STATEMENT: CONDITIONAL_STATEMENT •

    $default  reduce using rule 35 (STATEMENT)


State 34

   36 STATEMENT: LOOPING_STATEMENT •

    $default  reduce using rule 36 (STATEMENT)


State 35

   89 LOOPING_STATEMENT: WHILE_LOOP •

    $default  reduce using rule 89 (LOOPING_STATEMENT)


State 36

   90 LOOPING_STATEMENT: FOR_LOOP •

    $default  reduce using rule 90 (LOOPING_STATEMENT)


State 37

   26 MORE_IDENTIFIERS: COMMA IDENTIFIER • MORE_IDENTIFIERS
   27                 | COMMA IDENTIFIER •

    COMMA  shift, and go to state 17

    $default  reduce using rule 27 (MORE_IDENTIFIERS)

    MORE_IDENTIFIERS  go to state 56


State 38

    2 DATATYPE: INTEGER •

    $default  reduce using rule 2 (DATATYPE)


State 39

    3 DATATYPE: REAL •

    $default  reduce using rule 3 (DATATYPE)


State 40

    4 DATATYPE: BOOLEAN •

    $default  reduce using rule 4 (DATATYPE)


State 41

    5 DATATYPE: CHAR •

    $default  reduce using rule 5 (DATATYPE)


State 42

   28 ARRAY_DECLARATION: IDENTIFIER COLON ARRAY • LBRACKET INT_NUMBER ARRAY_DOT INT_NUMBER RBRACKET OF DATATYPE SEMICOLON

    LBRACKET  shift, and go to state 57


State 43

   24 SINGLE_VARIABLE: IDENTIFIER COLON DATATYPE • SEMICOLON

    SEMICOLON  shift, and go to state 58


State 44

   25 MULTIPLE_VARIABLE: IDENTIFIER MORE_IDENTIFIERS COLON • DATATYPE SEMICOLON

    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39
    BOOLEAN  shift, and go to state 40
    CHAR     shift, and go to state 41

    DATATYPE  go to state 59


State 45

   54 CONDITIONAL_STATEMENT: IF $@1 • ANY_EXPRESSION $@2 AFTER_IF_ANY_EXPR

    NOT             shift, and go to state 60
    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 65

    ANY_EXPRESSION               go to state 66
    EXPRESSION_SEQUENCE          go to state 67
    BOOLEAN_EXPRESSION_SEQUENCE  go to state 68
    TERM                         go to state 69


State 46

   97 FOR_LOOP: FOR $@10 • IDENTIFIER COLON EQUAL EXPRESSION_SEQUENCE $@11 AFTER_FOR_CONDITION

    IDENTIFIER  shift, and go to state 70


State 47

   94 WHILE_LOOP: WHILE $@7 • ANY_EXPRESSION DO $@8 BODY_OF_LOOP $@9 SEMICOLON

    NOT             shift, and go to state 60
    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 65

    ANY_EXPRESSION               go to state 71
    EXPRESSION_SEQUENCE          go to state 67
    BOOLEAN_EXPRESSION_SEQUENCE  go to state 68
    TERM                         go to state 69


State 48

   37 READ_STATEMENT: READ LPAREN • IDENTIFIER RPAREN SEMICOLON
   38               | READ LPAREN • IDENTIFIER ARRAY_ADD_ON_ID RPAREN SEMICOLON

    IDENTIFIER  shift, and go to state 72


State 49

   39 WRITE_STATEMENT: WRITE LPAREN • WRITE_IDENTIFIER_LIST RPAREN SEMICOLON

    INT_NUMBER      shift, and go to state 73
    DECIMAL_NUMBER  shift, and go to state 74
    IDENTIFIER      shift, and go to state 75
    STRING          shift, and go to state 76
    CHARACTER       shift, and go to state 77

    WRITE_IDENTIFIER_LIST  go to state 78
    WRITE_IDENTIFIER       go to state 79


State 50

   40 WRITE_STATEMENT: WRITE_LN LPAREN • WRITE_IDENTIFIER_LIST RPAREN SEMICOLON

    INT_NUMBER      shift, and go to state 73
    DECIMAL_NUMBER  shift, and go to state 74
    IDENTIFIER      shift, and go to state 75
    STRING          shift, and go to state 76
    CHARACTER       shift, and go to state 77

    WRITE_IDENTIFIER_LIST  go to state 80
    WRITE_IDENTIFIER       go to state 79


State 51

   49 ASSIGNMENT_STATEMENT: IDENTIFIER COLON • EQUAL ANY_EXPRESSION SEMICOLON
   51                     | IDENTIFIER COLON • EQUAL CHARACTER SEMICOLON

    EQUAL  shift, and go to state 81


State 52

   12 ARRAY_ADD_ON_ID: LBRACKET • BETWEEN_BRACKETS RBRACKET

    INT_NUMBER  shift, and go to state 82
    IDENTIFIER  shift, and go to state 83

    BETWEEN_BRACKETS  go to state 84


State 53

   50 ASSIGNMENT_STATEMENT: IDENTIFIER ARRAY_ADD_ON_ID • COLON EQUAL ANY_EXPRESSION SEMICOLON

    COLON  shift, and go to state 85


State 54

   29 BODY_OF_PROGRAM: BEGINK STATEMENTS END • DOT

    DOT  shift, and go to state 86


State 55

   30 STATEMENTS: STATEMENT STATEMENTS •

    $default  reduce using rule 30 (STATEMENTS)


State 56

   26 MORE_IDENTIFIERS: COMMA IDENTIFIER MORE_IDENTIFIERS •

    $default  reduce using rule 26 (MORE_IDENTIFIERS)


State 57

   28 ARRAY_DECLARATION: IDENTIFIER COLON ARRAY LBRACKET • INT_NUMBER ARRAY_DOT INT_NUMBER RBRACKET OF DATATYPE SEMICOLON

    INT_NUMBER  shift, and go to state 87


State 58

   24 SINGLE_VARIABLE: IDENTIFIER COLON DATATYPE SEMICOLON •

    $default  reduce using rule 24 (SINGLE_VARIABLE)


State 59

   25 MULTIPLE_VARIABLE: IDENTIFIER MORE_IDENTIFIERS COLON DATATYPE • SEMICOLON

    SEMICOLON  shift, and go to state 88


State 60

   77 BOOLEAN_EXPRESSION_SEQUENCE: NOT • ANY_EXPRESSION

    NOT             shift, and go to state 60
    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 65

    ANY_EXPRESSION               go to state 89
    EXPRESSION_SEQUENCE          go to state 67
    BOOLEAN_EXPRESSION_SEQUENCE  go to state 68
    TERM                         go to state 69


State 61

   75 EXPRESSION_SEQUENCE: MINUS • EXPRESSION_SEQUENCE

    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 90

    EXPRESSION_SEQUENCE  go to state 91
    TERM                 go to state 69


State 62

   83 TERM: INT_NUMBER •

    $default  reduce using rule 83 (TERM)


State 63

   84 TERM: DECIMAL_NUMBER •

    $default  reduce using rule 84 (TERM)


State 64

   81 TERM: IDENTIFIER •
   82     | IDENTIFIER • ARRAY_ADD_ON_ID

    LBRACKET  shift, and go to state 52

    $default  reduce using rule 81 (TERM)

    ARRAY_ADD_ON_ID  go to state 92


State 65

   67 ANY_EXPRESSION: LPAREN • EXPRESSION_SEQUENCE RELOP EXPRESSION_SEQUENCE RPAREN
   76 EXPRESSION_SEQUENCE: LPAREN • EXPRESSION_SEQUENCE RPAREN
   80 BOOLEAN_EXPRESSION_SEQUENCE: LPAREN • BOOLEAN_EXPRESSION_SEQUENCE RPAREN

    NOT             shift, and go to state 60
    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 65

    ANY_EXPRESSION               go to state 93
    EXPRESSION_SEQUENCE          go to state 94
    BOOLEAN_EXPRESSION_SEQUENCE  go to state 95
    TERM                         go to state 69


State 66

   54 CONDITIONAL_STATEMENT: IF $@1 ANY_EXPRESSION • $@2 AFTER_IF_ANY_EXPR
   78 BOOLEAN_EXPRESSION_SEQUENCE: ANY_EXPRESSION • AND ANY_EXPRESSION
   79                            | ANY_EXPRESSION • OR ANY_EXPRESSION

    AND  shift, and go to state 96
    OR   shift, and go to state 97

    $default  reduce using rule 53 ($@2)

    $@2  go to state 98


State 67

   65 ANY_EXPRESSION: EXPRESSION_SEQUENCE •
   66               | EXPRESSION_SEQUENCE • RELOP EXPRESSION_SEQUENCE
   70 EXPRESSION_SEQUENCE: EXPRESSION_SEQUENCE • PLUS EXPRESSION_SEQUENCE
   71                    | EXPRESSION_SEQUENCE • MINUS EXPRESSION_SEQUENCE
   72                    | EXPRESSION_SEQUENCE • MULTIPLY EXPRESSION_SEQUENCE
   73                    | EXPRESSION_SEQUENCE • DIVIDE EXPRESSION_SEQUENCE
   74                    | EXPRESSION_SEQUENCE • MOD EXPRESSION_SEQUENCE

    PLUS          shift, and go to state 99
    MINUS         shift, and go to state 100
    MULTIPLY      shift, and go to state 101
    DIVIDE        shift, and go to state 102
    MOD           shift, and go to state 103
    EQUAL         shift, and go to state 104
    LESS          shift, and go to state 105
    GREATER       shift, and go to state 106
    LESSEQUAL     shift, and go to state 107
    GREATEREQUAL  shift, and go to state 108
    NOTEQUAL      shift, and go to state 109

    $default  reduce using rule 65 (ANY_EXPRESSION)

    RELOP  go to state 110


State 68

   68 ANY_EXPRESSION: BOOLEAN_EXPRESSION_SEQUENCE •

    $default  reduce using rule 68 (ANY_EXPRESSION)


State 69

   69 EXPRESSION_SEQUENCE: TERM •

    $default  reduce using rule 69 (EXPRESSION_SEQUENCE)


State 70

   97 FOR_LOOP: FOR $@10 IDENTIFIER • COLON EQUAL EXPRESSION_SEQUENCE $@11 AFTER_FOR_CONDITION

    COLON  shift, and go to state 111


State 71

   78 BOOLEAN_EXPRESSION_SEQUENCE: ANY_EXPRESSION • AND ANY_EXPRESSION
   79                            | ANY_EXPRESSION • OR ANY_EXPRESSION
   94 WHILE_LOOP: WHILE $@7 ANY_EXPRESSION • DO $@8 BODY_OF_LOOP $@9 SEMICOLON

    DO   shift, and go to state 112
    AND  shift, and go to state 96
    OR   shift, and go to state 97


State 72

   37 READ_STATEMENT: READ LPAREN IDENTIFIER • RPAREN SEMICOLON
   38               | READ LPAREN IDENTIFIER • ARRAY_ADD_ON_ID RPAREN SEMICOLON

    RPAREN    shift, and go to state 113
    LBRACKET  shift, and go to state 52

    ARRAY_ADD_ON_ID  go to state 114


State 73

   46 WRITE_IDENTIFIER: INT_NUMBER •

    $default  reduce using rule 46 (WRITE_IDENTIFIER)


State 74

   47 WRITE_IDENTIFIER: DECIMAL_NUMBER •

    $default  reduce using rule 47 (WRITE_IDENTIFIER)


State 75

   43 WRITE_IDENTIFIER: IDENTIFIER •
   44                 | IDENTIFIER • ARRAY_ADD_ON_ID

    LBRACKET  shift, and go to state 52

    $default  reduce using rule 43 (WRITE_IDENTIFIER)

    ARRAY_ADD_ON_ID  go to state 115


State 76

   45 WRITE_IDENTIFIER: STRING •

    $default  reduce using rule 45 (WRITE_IDENTIFIER)


State 77

   48 WRITE_IDENTIFIER: CHARACTER •

    $default  reduce using rule 48 (WRITE_IDENTIFIER)


State 78

   39 WRITE_STATEMENT: WRITE LPAREN WRITE_IDENTIFIER_LIST • RPAREN SEMICOLON

    RPAREN  shift, and go to state 116


State 79

   41 WRITE_IDENTIFIER_LIST: WRITE_IDENTIFIER •
   42                      | WRITE_IDENTIFIER • COMMA WRITE_IDENTIFIER_LIST

    COMMA  shift, and go to state 117

    $default  reduce using rule 41 (WRITE_IDENTIFIER_LIST)


State 80

   40 WRITE_STATEMENT: WRITE_LN LPAREN WRITE_IDENTIFIER_LIST • RPAREN SEMICOLON

    RPAREN  shift, and go to state 118


State 81

   49 ASSIGNMENT_STATEMENT: IDENTIFIER COLON EQUAL • ANY_EXPRESSION SEMICOLON
   51                     | IDENTIFIER COLON EQUAL • CHARACTER SEMICOLON

    NOT             shift, and go to state 60
    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 65
    CHARACTER       shift, and go to state 119

    ANY_EXPRESSION               go to state 120
    EXPRESSION_SEQUENCE          go to state 67
    BOOLEAN_EXPRESSION_SEQUENCE  go to state 68
    TERM                         go to state 69


State 82

   13 BETWEEN_BRACKETS: INT_NUMBER •

    $default  reduce using rule 13 (BETWEEN_BRACKETS)


State 83

   14 BETWEEN_BRACKETS: IDENTIFIER •
   15                 | IDENTIFIER • ARRAY_ADD_ON_ID

    LBRACKET  shift, and go to state 52

    $default  reduce using rule 14 (BETWEEN_BRACKETS)

    ARRAY_ADD_ON_ID  go to state 121


State 84

   12 ARRAY_ADD_ON_ID: LBRACKET BETWEEN_BRACKETS • RBRACKET

    RBRACKET  shift, and go to state 122


State 85

   50 ASSIGNMENT_STATEMENT: IDENTIFIER ARRAY_ADD_ON_ID COLON • EQUAL ANY_EXPRESSION SEMICOLON

    EQUAL  shift, and go to state 123


State 86

   29 BODY_OF_PROGRAM: BEGINK STATEMENTS END DOT •

    $default  reduce using rule 29 (BODY_OF_PROGRAM)


State 87

   28 ARRAY_DECLARATION: IDENTIFIER COLON ARRAY LBRACKET INT_NUMBER • ARRAY_DOT INT_NUMBER RBRACKET OF DATATYPE SEMICOLON

    ARRAY_DOT  shift, and go to state 124


State 88

   25 MULTIPLE_VARIABLE: IDENTIFIER MORE_IDENTIFIERS COLON DATATYPE SEMICOLON •

    $default  reduce using rule 25 (MULTIPLE_VARIABLE)


State 89

   77 BOOLEAN_EXPRESSION_SEQUENCE: NOT ANY_EXPRESSION •
   78                            | ANY_EXPRESSION • AND ANY_EXPRESSION
   79                            | ANY_EXPRESSION • OR ANY_EXPRESSION

    $default  reduce using rule 77 (BOOLEAN_EXPRESSION_SEQUENCE)


State 90

   76 EXPRESSION_SEQUENCE: LPAREN • EXPRESSION_SEQUENCE RPAREN

    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 90

    EXPRESSION_SEQUENCE  go to state 125
    TERM                 go to state 69


State 91

   70 EXPRESSION_SEQUENCE: EXPRESSION_SEQUENCE • PLUS EXPRESSION_SEQUENCE
   71                    | EXPRESSION_SEQUENCE • MINUS EXPRESSION_SEQUENCE
   72                    | EXPRESSION_SEQUENCE • MULTIPLY EXPRESSION_SEQUENCE
   73                    | EXPRESSION_SEQUENCE • DIVIDE EXPRESSION_SEQUENCE
   74                    | EXPRESSION_SEQUENCE • MOD EXPRESSION_SEQUENCE
   75                    | MINUS EXPRESSION_SEQUENCE •

    MULTIPLY  shift, and go to state 101
    DIVIDE    shift, and go to state 102
    MOD       shift, and go to state 103

    $default  reduce using rule 75 (EXPRESSION_SEQUENCE)


State 92

   82 TERM: IDENTIFIER ARRAY_ADD_ON_ID •

    $default  reduce using rule 82 (TERM)


State 93

   78 BOOLEAN_EXPRESSION_SEQUENCE: ANY_EXPRESSION • AND ANY_EXPRESSION
   79                            | ANY_EXPRESSION • OR ANY_EXPRESSION

    AND  shift, and go to state 96
    OR   shift, and go to state 97


State 94

   65 ANY_EXPRESSION: EXPRESSION_SEQUENCE •
   66               | EXPRESSION_SEQUENCE • RELOP EXPRESSION_SEQUENCE
   67               | LPAREN EXPRESSION_SEQUENCE • RELOP EXPRESSION_SEQUENCE RPAREN
   70 EXPRESSION_SEQUENCE: EXPRESSION_SEQUENCE • PLUS EXPRESSION_SEQUENCE
   71                    | EXPRESSION_SEQUENCE • MINUS EXPRESSION_SEQUENCE
   72                    | EXPRESSION_SEQUENCE • MULTIPLY EXPRESSION_SEQUENCE
   73                    | EXPRESSION_SEQUENCE • DIVIDE EXPRESSION_SEQUENCE
   74                    | EXPRESSION_SEQUENCE • MOD EXPRESSION_SEQUENCE
   76                    | LPAREN EXPRESSION_SEQUENCE • RPAREN

    PLUS          shift, and go to state 99
    MINUS         shift, and go to state 100
    MULTIPLY      shift, and go to state 101
    DIVIDE        shift, and go to state 102
    MOD           shift, and go to state 103
    EQUAL         shift, and go to state 104
    LESS          shift, and go to state 105
    GREATER       shift, and go to state 106
    LESSEQUAL     shift, and go to state 107
    GREATEREQUAL  shift, and go to state 108
    NOTEQUAL      shift, and go to state 109
    RPAREN        shift, and go to state 126

    $default  reduce using rule 65 (ANY_EXPRESSION)

    RELOP  go to state 127


State 95

   68 ANY_EXPRESSION: BOOLEAN_EXPRESSION_SEQUENCE •
   80 BOOLEAN_EXPRESSION_SEQUENCE: LPAREN BOOLEAN_EXPRESSION_SEQUENCE • RPAREN

    RPAREN  shift, and go to state 128

    $default  reduce using rule 68 (ANY_EXPRESSION)


State 96

   78 BOOLEAN_EXPRESSION_SEQUENCE: ANY_EXPRESSION AND • ANY_EXPRESSION

    NOT             shift, and go to state 60
    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 65

    ANY_EXPRESSION               go to state 129
    EXPRESSION_SEQUENCE          go to state 67
    BOOLEAN_EXPRESSION_SEQUENCE  go to state 68
    TERM                         go to state 69


State 97

   79 BOOLEAN_EXPRESSION_SEQUENCE: ANY_EXPRESSION OR • ANY_EXPRESSION

    NOT             shift, and go to state 60
    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 65

    ANY_EXPRESSION               go to state 130
    EXPRESSION_SEQUENCE          go to state 67
    BOOLEAN_EXPRESSION_SEQUENCE  go to state 68
    TERM                         go to state 69


State 98

   54 CONDITIONAL_STATEMENT: IF $@1 ANY_EXPRESSION $@2 • AFTER_IF_ANY_EXPR

    THEN  shift, and go to state 131

    AFTER_IF_ANY_EXPR  go to state 132


State 99

   70 EXPRESSION_SEQUENCE: EXPRESSION_SEQUENCE PLUS • EXPRESSION_SEQUENCE

    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 90

    EXPRESSION_SEQUENCE  go to state 133
    TERM                 go to state 69


State 100

   71 EXPRESSION_SEQUENCE: EXPRESSION_SEQUENCE MINUS • EXPRESSION_SEQUENCE

    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 90

    EXPRESSION_SEQUENCE  go to state 134
    TERM                 go to state 69


State 101

   72 EXPRESSION_SEQUENCE: EXPRESSION_SEQUENCE MULTIPLY • EXPRESSION_SEQUENCE

    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 90

    EXPRESSION_SEQUENCE  go to state 135
    TERM                 go to state 69


State 102

   73 EXPRESSION_SEQUENCE: EXPRESSION_SEQUENCE DIVIDE • EXPRESSION_SEQUENCE

    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 90

    EXPRESSION_SEQUENCE  go to state 136
    TERM                 go to state 69


State 103

   74 EXPRESSION_SEQUENCE: EXPRESSION_SEQUENCE MOD • EXPRESSION_SEQUENCE

    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 90

    EXPRESSION_SEQUENCE  go to state 137
    TERM                 go to state 69


State 104

    6 RELOP: EQUAL •

    $default  reduce using rule 6 (RELOP)


State 105

    8 RELOP: LESS •

    $default  reduce using rule 8 (RELOP)


State 106

   10 RELOP: GREATER •

    $default  reduce using rule 10 (RELOP)


State 107

    9 RELOP: LESSEQUAL •

    $default  reduce using rule 9 (RELOP)


State 108

   11 RELOP: GREATEREQUAL •

    $default  reduce using rule 11 (RELOP)


State 109

    7 RELOP: NOTEQUAL •

    $default  reduce using rule 7 (RELOP)


State 110

   66 ANY_EXPRESSION: EXPRESSION_SEQUENCE RELOP • EXPRESSION_SEQUENCE

    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 90

    EXPRESSION_SEQUENCE  go to state 138
    TERM                 go to state 69


State 111

   97 FOR_LOOP: FOR $@10 IDENTIFIER COLON • EQUAL EXPRESSION_SEQUENCE $@11 AFTER_FOR_CONDITION

    EQUAL  shift, and go to state 139


State 112

   94 WHILE_LOOP: WHILE $@7 ANY_EXPRESSION DO • $@8 BODY_OF_LOOP $@9 SEMICOLON

    $default  reduce using rule 92 ($@8)

    $@8  go to state 140


State 113

   37 READ_STATEMENT: READ LPAREN IDENTIFIER RPAREN • SEMICOLON

    SEMICOLON  shift, and go to state 141


State 114

   38 READ_STATEMENT: READ LPAREN IDENTIFIER ARRAY_ADD_ON_ID • RPAREN SEMICOLON

    RPAREN  shift, and go to state 142


State 115

   44 WRITE_IDENTIFIER: IDENTIFIER ARRAY_ADD_ON_ID •

    $default  reduce using rule 44 (WRITE_IDENTIFIER)


State 116

   39 WRITE_STATEMENT: WRITE LPAREN WRITE_IDENTIFIER_LIST RPAREN • SEMICOLON

    SEMICOLON  shift, and go to state 143


State 117

   42 WRITE_IDENTIFIER_LIST: WRITE_IDENTIFIER COMMA • WRITE_IDENTIFIER_LIST

    INT_NUMBER      shift, and go to state 73
    DECIMAL_NUMBER  shift, and go to state 74
    IDENTIFIER      shift, and go to state 75
    STRING          shift, and go to state 76
    CHARACTER       shift, and go to state 77

    WRITE_IDENTIFIER_LIST  go to state 144
    WRITE_IDENTIFIER       go to state 79


State 118

   40 WRITE_STATEMENT: WRITE_LN LPAREN WRITE_IDENTIFIER_LIST RPAREN • SEMICOLON

    SEMICOLON  shift, and go to state 145


State 119

   51 ASSIGNMENT_STATEMENT: IDENTIFIER COLON EQUAL CHARACTER • SEMICOLON

    SEMICOLON  shift, and go to state 146


State 120

   49 ASSIGNMENT_STATEMENT: IDENTIFIER COLON EQUAL ANY_EXPRESSION • SEMICOLON
   78 BOOLEAN_EXPRESSION_SEQUENCE: ANY_EXPRESSION • AND ANY_EXPRESSION
   79                            | ANY_EXPRESSION • OR ANY_EXPRESSION

    AND        shift, and go to state 96
    OR         shift, and go to state 97
    SEMICOLON  shift, and go to state 147


State 121

   15 BETWEEN_BRACKETS: IDENTIFIER ARRAY_ADD_ON_ID •

    $default  reduce using rule 15 (BETWEEN_BRACKETS)


State 122

   12 ARRAY_ADD_ON_ID: LBRACKET BETWEEN_BRACKETS RBRACKET •

    $default  reduce using rule 12 (ARRAY_ADD_ON_ID)


State 123

   50 ASSIGNMENT_STATEMENT: IDENTIFIER ARRAY_ADD_ON_ID COLON EQUAL • ANY_EXPRESSION SEMICOLON

    NOT             shift, and go to state 60
    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 65

    ANY_EXPRESSION               go to state 148
    EXPRESSION_SEQUENCE          go to state 67
    BOOLEAN_EXPRESSION_SEQUENCE  go to state 68
    TERM                         go to state 69


State 124

   28 ARRAY_DECLARATION: IDENTIFIER COLON ARRAY LBRACKET INT_NUMBER ARRAY_DOT • INT_NUMBER RBRACKET OF DATATYPE SEMICOLON

    INT_NUMBER  shift, and go to state 149


State 125

   70 EXPRESSION_SEQUENCE: EXPRESSION_SEQUENCE • PLUS EXPRESSION_SEQUENCE
   71                    | EXPRESSION_SEQUENCE • MINUS EXPRESSION_SEQUENCE
   72                    | EXPRESSION_SEQUENCE • MULTIPLY EXPRESSION_SEQUENCE
   73                    | EXPRESSION_SEQUENCE • DIVIDE EXPRESSION_SEQUENCE
   74                    | EXPRESSION_SEQUENCE • MOD EXPRESSION_SEQUENCE
   76                    | LPAREN EXPRESSION_SEQUENCE • RPAREN

    PLUS      shift, and go to state 99
    MINUS     shift, and go to state 100
    MULTIPLY  shift, and go to state 101
    DIVIDE    shift, and go to state 102
    MOD       shift, and go to state 103
    RPAREN    shift, and go to state 126


State 126

   76 EXPRESSION_SEQUENCE: LPAREN EXPRESSION_SEQUENCE RPAREN •

    $default  reduce using rule 76 (EXPRESSION_SEQUENCE)


State 127

   66 ANY_EXPRESSION: EXPRESSION_SEQUENCE RELOP • EXPRESSION_SEQUENCE
   67               | LPAREN EXPRESSION_SEQUENCE RELOP • EXPRESSION_SEQUENCE RPAREN

    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 90

    EXPRESSION_SEQUENCE  go to state 150
    TERM                 go to state 69


State 128

   80 BOOLEAN_EXPRESSION_SEQUENCE: LPAREN BOOLEAN_EXPRESSION_SEQUENCE RPAREN •

    $default  reduce using rule 80 (BOOLEAN_EXPRESSION_SEQUENCE)


State 129

   78 BOOLEAN_EXPRESSION_SEQUENCE: ANY_EXPRESSION • AND ANY_EXPRESSION
   78                            | ANY_EXPRESSION AND ANY_EXPRESSION •
   79                            | ANY_EXPRESSION • OR ANY_EXPRESSION

    $default  reduce using rule 78 (BOOLEAN_EXPRESSION_SEQUENCE)


State 130

   78 BOOLEAN_EXPRESSION_SEQUENCE: ANY_EXPRESSION • AND ANY_EXPRESSION
   79                            | ANY_EXPRESSION • OR ANY_EXPRESSION
   79                            | ANY_EXPRESSION OR ANY_EXPRESSION •

    $default  reduce using rule 79 (BOOLEAN_EXPRESSION_SEQUENCE)


State 131

   57 AFTER_IF_ANY_EXPR: THEN • $@3 BODY_OF_CONDITIONAL $@4 AFTER_IF_THEN_BODY

    $default  reduce using rule 55 ($@3)

    $@3  go to state 151


State 132

   54 CONDITIONAL_STATEMENT: IF $@1 ANY_EXPRESSION $@2 AFTER_IF_ANY_EXPR •

    $default  reduce using rule 54 (CONDITIONAL_STATEMENT)


State 133

   70 EXPRESSION_SEQUENCE: EXPRESSION_SEQUENCE • PLUS EXPRESSION_SEQUENCE
   70                    | EXPRESSION_SEQUENCE PLUS EXPRESSION_SEQUENCE •
   71                    | EXPRESSION_SEQUENCE • MINUS EXPRESSION_SEQUENCE
   72                    | EXPRESSION_SEQUENCE • MULTIPLY EXPRESSION_SEQUENCE
   73                    | EXPRESSION_SEQUENCE • DIVIDE EXPRESSION_SEQUENCE
   74                    | EXPRESSION_SEQUENCE • MOD EXPRESSION_SEQUENCE

    MULTIPLY  shift, and go to state 101
    DIVIDE    shift, and go to state 102
    MOD       shift, and go to state 103

    $default  reduce using rule 70 (EXPRESSION_SEQUENCE)


State 134

   70 EXPRESSION_SEQUENCE: EXPRESSION_SEQUENCE • PLUS EXPRESSION_SEQUENCE
   71                    | EXPRESSION_SEQUENCE • MINUS EXPRESSION_SEQUENCE
   71                    | EXPRESSION_SEQUENCE MINUS EXPRESSION_SEQUENCE •
   72                    | EXPRESSION_SEQUENCE • MULTIPLY EXPRESSION_SEQUENCE
   73                    | EXPRESSION_SEQUENCE • DIVIDE EXPRESSION_SEQUENCE
   74                    | EXPRESSION_SEQUENCE • MOD EXPRESSION_SEQUENCE

    MULTIPLY  shift, and go to state 101
    DIVIDE    shift, and go to state 102
    MOD       shift, and go to state 103

    $default  reduce using rule 71 (EXPRESSION_SEQUENCE)


State 135

   70 EXPRESSION_SEQUENCE: EXPRESSION_SEQUENCE • PLUS EXPRESSION_SEQUENCE
   71                    | EXPRESSION_SEQUENCE • MINUS EXPRESSION_SEQUENCE
   72                    | EXPRESSION_SEQUENCE • MULTIPLY EXPRESSION_SEQUENCE
   72                    | EXPRESSION_SEQUENCE MULTIPLY EXPRESSION_SEQUENCE •
   73                    | EXPRESSION_SEQUENCE • DIVIDE EXPRESSION_SEQUENCE
   74                    | EXPRESSION_SEQUENCE • MOD EXPRESSION_SEQUENCE

    $default  reduce using rule 72 (EXPRESSION_SEQUENCE)


State 136

   70 EXPRESSION_SEQUENCE: EXPRESSION_SEQUENCE • PLUS EXPRESSION_SEQUENCE
   71                    | EXPRESSION_SEQUENCE • MINUS EXPRESSION_SEQUENCE
   72                    | EXPRESSION_SEQUENCE • MULTIPLY EXPRESSION_SEQUENCE
   73                    | EXPRESSION_SEQUENCE • DIVIDE EXPRESSION_SEQUENCE
   73                    | EXPRESSION_SEQUENCE DIVIDE EXPRESSION_SEQUENCE •
   74                    | EXPRESSION_SEQUENCE • MOD EXPRESSION_SEQUENCE

    $default  reduce using rule 73 (EXPRESSION_SEQUENCE)


State 137

   70 EXPRESSION_SEQUENCE: EXPRESSION_SEQUENCE • PLUS EXPRESSION_SEQUENCE
   71                    | EXPRESSION_SEQUENCE • MINUS EXPRESSION_SEQUENCE
   72                    | EXPRESSION_SEQUENCE • MULTIPLY EXPRESSION_SEQUENCE
   73                    | EXPRESSION_SEQUENCE • DIVIDE EXPRESSION_SEQUENCE
   74                    | EXPRESSION_SEQUENCE • MOD EXPRESSION_SEQUENCE
   74                    | EXPRESSION_SEQUENCE MOD EXPRESSION_SEQUENCE •

    $default  reduce using rule 74 (EXPRESSION_SEQUENCE)


State 138

   66 ANY_EXPRESSION: EXPRESSION_SEQUENCE RELOP EXPRESSION_SEQUENCE •
   70 EXPRESSION_SEQUENCE: EXPRESSION_SEQUENCE • PLUS EXPRESSION_SEQUENCE
   71                    | EXPRESSION_SEQUENCE • MINUS EXPRESSION_SEQUENCE
   72                    | EXPRESSION_SEQUENCE • MULTIPLY EXPRESSION_SEQUENCE
   73                    | EXPRESSION_SEQUENCE • DIVIDE EXPRESSION_SEQUENCE
   74                    | EXPRESSION_SEQUENCE • MOD EXPRESSION_SEQUENCE

    PLUS      shift, and go to state 99
    MINUS     shift, and go to state 100
    MULTIPLY  shift, and go to state 101
    DIVIDE    shift, and go to state 102
    MOD       shift, and go to state 103

    $default  reduce using rule 66 (ANY_EXPRESSION)


State 139

   97 FOR_LOOP: FOR $@10 IDENTIFIER COLON EQUAL • EXPRESSION_SEQUENCE $@11 AFTER_FOR_CONDITION

    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 90

    EXPRESSION_SEQUENCE  go to state 152
    TERM                 go to state 69


State 140

   94 WHILE_LOOP: WHILE $@7 ANY_EXPRESSION DO $@8 • BODY_OF_LOOP $@9 SEMICOLON

    BEGINK  shift, and go to state 153

    BODY_OF_LOOP  go to state 154


State 141

   37 READ_STATEMENT: READ LPAREN IDENTIFIER RPAREN SEMICOLON •

    $default  reduce using rule 37 (READ_STATEMENT)


State 142

   38 READ_STATEMENT: READ LPAREN IDENTIFIER ARRAY_ADD_ON_ID RPAREN • SEMICOLON

    SEMICOLON  shift, and go to state 155


State 143

   39 WRITE_STATEMENT: WRITE LPAREN WRITE_IDENTIFIER_LIST RPAREN SEMICOLON •

    $default  reduce using rule 39 (WRITE_STATEMENT)


State 144

   42 WRITE_IDENTIFIER_LIST: WRITE_IDENTIFIER COMMA WRITE_IDENTIFIER_LIST •

    $default  reduce using rule 42 (WRITE_IDENTIFIER_LIST)


State 145

   40 WRITE_STATEMENT: WRITE_LN LPAREN WRITE_IDENTIFIER_LIST RPAREN SEMICOLON •

    $default  reduce using rule 40 (WRITE_STATEMENT)


State 146

   51 ASSIGNMENT_STATEMENT: IDENTIFIER COLON EQUAL CHARACTER SEMICOLON •

    $default  reduce using rule 51 (ASSIGNMENT_STATEMENT)


State 147

   49 ASSIGNMENT_STATEMENT: IDENTIFIER COLON EQUAL ANY_EXPRESSION SEMICOLON •

    $default  reduce using rule 49 (ASSIGNMENT_STATEMENT)


State 148

   50 ASSIGNMENT_STATEMENT: IDENTIFIER ARRAY_ADD_ON_ID COLON EQUAL ANY_EXPRESSION • SEMICOLON
   78 BOOLEAN_EXPRESSION_SEQUENCE: ANY_EXPRESSION • AND ANY_EXPRESSION
   79                            | ANY_EXPRESSION • OR ANY_EXPRESSION

    AND        shift, and go to state 96
    OR         shift, and go to state 97
    SEMICOLON  shift, and go to state 156


State 149

   28 ARRAY_DECLARATION: IDENTIFIER COLON ARRAY LBRACKET INT_NUMBER ARRAY_DOT INT_NUMBER • RBRACKET OF DATATYPE SEMICOLON

    RBRACKET  shift, and go to state 157


State 150

   66 ANY_EXPRESSION: EXPRESSION_SEQUENCE RELOP EXPRESSION_SEQUENCE •
   67               | LPAREN EXPRESSION_SEQUENCE RELOP EXPRESSION_SEQUENCE • RPAREN
   70 EXPRESSION_SEQUENCE: EXPRESSION_SEQUENCE • PLUS EXPRESSION_SEQUENCE
   71                    | EXPRESSION_SEQUENCE • MINUS EXPRESSION_SEQUENCE
   72                    | EXPRESSION_SEQUENCE • MULTIPLY EXPRESSION_SEQUENCE
   73                    | EXPRESSION_SEQUENCE • DIVIDE EXPRESSION_SEQUENCE
   74                    | EXPRESSION_SEQUENCE • MOD EXPRESSION_SEQUENCE

    PLUS      shift, and go to state 99
    MINUS     shift, and go to state 100
    MULTIPLY  shift, and go to state 101
    DIVIDE    shift, and go to state 102
    MOD       shift, and go to state 103
    RPAREN    shift, and go to state 158

    $default  reduce using rule 66 (ANY_EXPRESSION)


State 151

   57 AFTER_IF_ANY_EXPR: THEN $@3 • BODY_OF_CONDITIONAL $@4 AFTER_IF_THEN_BODY

    BEGINK  shift, and go to state 159

    BODY_OF_CONDITIONAL  go to state 160


State 152

   70 EXPRESSION_SEQUENCE: EXPRESSION_SEQUENCE • PLUS EXPRESSION_SEQUENCE
   71                    | EXPRESSION_SEQUENCE • MINUS EXPRESSION_SEQUENCE
   72                    | EXPRESSION_SEQUENCE • MULTIPLY EXPRESSION_SEQUENCE
   73                    | EXPRESSION_SEQUENCE • DIVIDE EXPRESSION_SEQUENCE
   74                    | EXPRESSION_SEQUENCE • MOD EXPRESSION_SEQUENCE
   97 FOR_LOOP: FOR $@10 IDENTIFIER COLON EQUAL EXPRESSION_SEQUENCE • $@11 AFTER_FOR_CONDITION

    PLUS      shift, and go to state 99
    MINUS     shift, and go to state 100
    MULTIPLY  shift, and go to state 101
    DIVIDE    shift, and go to state 102
    MOD       shift, and go to state 103

    $default  reduce using rule 96 ($@11)

    $@11  go to state 161


State 153

  106 BODY_OF_LOOP: BEGINK • STATEMENTS_INSIDE_LOOP END

    IF          shift, and go to state 21
    READ        shift, and go to state 24
    WRITE       shift, and go to state 25
    WRITE_LN    shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    READ_STATEMENT          go to state 162
    WRITE_STATEMENT         go to state 163
    ASSIGNMENT_STATEMENT    go to state 164
    CONDITIONAL_STATEMENT   go to state 165
    STATEMENTS_INSIDE_LOOP  go to state 166
    STATEMENT_INSIDE_LOOP   go to state 167


State 154

   94 WHILE_LOOP: WHILE $@7 ANY_EXPRESSION DO $@8 BODY_OF_LOOP • $@9 SEMICOLON

    $default  reduce using rule 93 ($@9)

    $@9  go to state 168


State 155

   38 READ_STATEMENT: READ LPAREN IDENTIFIER ARRAY_ADD_ON_ID RPAREN SEMICOLON •

    $default  reduce using rule 38 (READ_STATEMENT)


State 156

   50 ASSIGNMENT_STATEMENT: IDENTIFIER ARRAY_ADD_ON_ID COLON EQUAL ANY_EXPRESSION SEMICOLON •

    $default  reduce using rule 50 (ASSIGNMENT_STATEMENT)


State 157

   28 ARRAY_DECLARATION: IDENTIFIER COLON ARRAY LBRACKET INT_NUMBER ARRAY_DOT INT_NUMBER RBRACKET • OF DATATYPE SEMICOLON

    OF  shift, and go to state 169


State 158

   67 ANY_EXPRESSION: LPAREN EXPRESSION_SEQUENCE RELOP EXPRESSION_SEQUENCE RPAREN •

    $default  reduce using rule 67 (ANY_EXPRESSION)


State 159

   62 BODY_OF_CONDITIONAL: BEGINK • STATEMENTS_INSIDE_CONDITIONAL END

    FOR         shift, and go to state 22
    WHILE       shift, and go to state 23
    READ        shift, and go to state 24
    WRITE       shift, and go to state 25
    WRITE_LN    shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    READ_STATEMENT                 go to state 170
    WRITE_STATEMENT                go to state 171
    ASSIGNMENT_STATEMENT           go to state 172
    STATEMENTS_INSIDE_CONDITIONAL  go to state 173
    STATEMENT_INSIDE_CONDITIONAL   go to state 174
    LOOPING_STATEMENT              go to state 175
    WHILE_LOOP                     go to state 35
    FOR_LOOP                       go to state 36


State 160

   57 AFTER_IF_ANY_EXPR: THEN $@3 BODY_OF_CONDITIONAL • $@4 AFTER_IF_THEN_BODY

    $default  reduce using rule 56 ($@4)

    $@4  go to state 176


State 161

   97 FOR_LOOP: FOR $@10 IDENTIFIER COLON EQUAL EXPRESSION_SEQUENCE $@11 • AFTER_FOR_CONDITION

    TO      shift, and go to state 177
    DOWNTO  shift, and go to state 178

    AFTER_FOR_CONDITION  go to state 179


State 162

  109 STATEMENT_INSIDE_LOOP: READ_STATEMENT •

    $default  reduce using rule 109 (STATEMENT_INSIDE_LOOP)


State 163

  110 STATEMENT_INSIDE_LOOP: WRITE_STATEMENT •

    $default  reduce using rule 110 (STATEMENT_INSIDE_LOOP)


State 164

  111 STATEMENT_INSIDE_LOOP: ASSIGNMENT_STATEMENT •

    $default  reduce using rule 111 (STATEMENT_INSIDE_LOOP)


State 165

  112 STATEMENT_INSIDE_LOOP: CONDITIONAL_STATEMENT •

    $default  reduce using rule 112 (STATEMENT_INSIDE_LOOP)


State 166

  106 BODY_OF_LOOP: BEGINK STATEMENTS_INSIDE_LOOP • END

    END  shift, and go to state 180


State 167

  107 STATEMENTS_INSIDE_LOOP: STATEMENT_INSIDE_LOOP • STATEMENTS_INSIDE_LOOP
  108                       | STATEMENT_INSIDE_LOOP •

    IF          shift, and go to state 21
    READ        shift, and go to state 24
    WRITE       shift, and go to state 25
    WRITE_LN    shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 108 (STATEMENTS_INSIDE_LOOP)

    READ_STATEMENT          go to state 162
    WRITE_STATEMENT         go to state 163
    ASSIGNMENT_STATEMENT    go to state 164
    CONDITIONAL_STATEMENT   go to state 165
    STATEMENTS_INSIDE_LOOP  go to state 181
    STATEMENT_INSIDE_LOOP   go to state 167


State 168

   94 WHILE_LOOP: WHILE $@7 ANY_EXPRESSION DO $@8 BODY_OF_LOOP $@9 • SEMICOLON

    SEMICOLON  shift, and go to state 182


State 169

   28 ARRAY_DECLARATION: IDENTIFIER COLON ARRAY LBRACKET INT_NUMBER ARRAY_DOT INT_NUMBER RBRACKET OF • DATATYPE SEMICOLON

    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39
    BOOLEAN  shift, and go to state 40
    CHAR     shift, and go to state 41

    DATATYPE  go to state 183


State 170

   85 STATEMENT_INSIDE_CONDITIONAL: READ_STATEMENT •

    $default  reduce using rule 85 (STATEMENT_INSIDE_CONDITIONAL)


State 171

   86 STATEMENT_INSIDE_CONDITIONAL: WRITE_STATEMENT •

    $default  reduce using rule 86 (STATEMENT_INSIDE_CONDITIONAL)


State 172

   87 STATEMENT_INSIDE_CONDITIONAL: ASSIGNMENT_STATEMENT •

    $default  reduce using rule 87 (STATEMENT_INSIDE_CONDITIONAL)


State 173

   62 BODY_OF_CONDITIONAL: BEGINK STATEMENTS_INSIDE_CONDITIONAL • END

    END  shift, and go to state 184


State 174

   63 STATEMENTS_INSIDE_CONDITIONAL: STATEMENT_INSIDE_CONDITIONAL • STATEMENTS_INSIDE_CONDITIONAL
   64                              | STATEMENT_INSIDE_CONDITIONAL •

    FOR         shift, and go to state 22
    WHILE       shift, and go to state 23
    READ        shift, and go to state 24
    WRITE       shift, and go to state 25
    WRITE_LN    shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 64 (STATEMENTS_INSIDE_CONDITIONAL)

    READ_STATEMENT                 go to state 170
    WRITE_STATEMENT                go to state 171
    ASSIGNMENT_STATEMENT           go to state 172
    STATEMENTS_INSIDE_CONDITIONAL  go to state 185
    STATEMENT_INSIDE_CONDITIONAL   go to state 174
    LOOPING_STATEMENT              go to state 175
    WHILE_LOOP                     go to state 35
    FOR_LOOP                       go to state 36


State 175

   88 STATEMENT_INSIDE_CONDITIONAL: LOOPING_STATEMENT •

    $default  reduce using rule 88 (STATEMENT_INSIDE_CONDITIONAL)


State 176

   57 AFTER_IF_ANY_EXPR: THEN $@3 BODY_OF_CONDITIONAL $@4 • AFTER_IF_THEN_BODY

    ELSE       shift, and go to state 186
    SEMICOLON  shift, and go to state 187

    AFTER_IF_THEN_BODY  go to state 188


State 177

  101 AFTER_FOR_CONDITION: TO • EXPRESSION_SEQUENCE $@12 DO $@13 BODY_OF_LOOP $@14 SEMICOLON

    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 90

    EXPRESSION_SEQUENCE  go to state 189
    TERM                 go to state 69


State 178

  105 AFTER_FOR_CONDITION: DOWNTO • EXPRESSION_SEQUENCE $@15 DO $@16 BODY_OF_LOOP $@17 SEMICOLON

    MINUS           shift, and go to state 61
    INT_NUMBER      shift, and go to state 62
    DECIMAL_NUMBER  shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    LPAREN          shift, and go to state 90

    EXPRESSION_SEQUENCE  go to state 190
    TERM                 go to state 69


State 179

   97 FOR_LOOP: FOR $@10 IDENTIFIER COLON EQUAL EXPRESSION_SEQUENCE $@11 AFTER_FOR_CONDITION •

    $default  reduce using rule 97 (FOR_LOOP)


State 180

  106 BODY_OF_LOOP: BEGINK STATEMENTS_INSIDE_LOOP END •

    $default  reduce using rule 106 (BODY_OF_LOOP)


State 181

  107 STATEMENTS_INSIDE_LOOP: STATEMENT_INSIDE_LOOP STATEMENTS_INSIDE_LOOP •

    $default  reduce using rule 107 (STATEMENTS_INSIDE_LOOP)


State 182

   94 WHILE_LOOP: WHILE $@7 ANY_EXPRESSION DO $@8 BODY_OF_LOOP $@9 SEMICOLON •

    $default  reduce using rule 94 (WHILE_LOOP)


State 183

   28 ARRAY_DECLARATION: IDENTIFIER COLON ARRAY LBRACKET INT_NUMBER ARRAY_DOT INT_NUMBER RBRACKET OF DATATYPE • SEMICOLON

    SEMICOLON  shift, and go to state 191


State 184

   62 BODY_OF_CONDITIONAL: BEGINK STATEMENTS_INSIDE_CONDITIONAL END •

    $default  reduce using rule 62 (BODY_OF_CONDITIONAL)


State 185

   63 STATEMENTS_INSIDE_CONDITIONAL: STATEMENT_INSIDE_CONDITIONAL STATEMENTS_INSIDE_CONDITIONAL •

    $default  reduce using rule 63 (STATEMENTS_INSIDE_CONDITIONAL)


State 186

   60 AFTER_IF_THEN_BODY: ELSE • $@5 BODY_OF_CONDITIONAL $@6 SEMICOLON

    $default  reduce using rule 58 ($@5)

    $@5  go to state 192


State 187

   61 AFTER_IF_THEN_BODY: SEMICOLON •

    $default  reduce using rule 61 (AFTER_IF_THEN_BODY)


State 188

   57 AFTER_IF_ANY_EXPR: THEN $@3 BODY_OF_CONDITIONAL $@4 AFTER_IF_THEN_BODY •

    $default  reduce using rule 57 (AFTER_IF_ANY_EXPR)


State 189

   70 EXPRESSION_SEQUENCE: EXPRESSION_SEQUENCE • PLUS EXPRESSION_SEQUENCE
   71                    | EXPRESSION_SEQUENCE • MINUS EXPRESSION_SEQUENCE
   72                    | EXPRESSION_SEQUENCE • MULTIPLY EXPRESSION_SEQUENCE
   73                    | EXPRESSION_SEQUENCE • DIVIDE EXPRESSION_SEQUENCE
   74                    | EXPRESSION_SEQUENCE • MOD EXPRESSION_SEQUENCE
  101 AFTER_FOR_CONDITION: TO EXPRESSION_SEQUENCE • $@12 DO $@13 BODY_OF_LOOP $@14 SEMICOLON

    PLUS      shift, and go to state 99
    MINUS     shift, and go to state 100
    MULTIPLY  shift, and go to state 101
    DIVIDE    shift, and go to state 102
    MOD       shift, and go to state 103

    $default  reduce using rule 98 ($@12)

    $@12  go to state 193


State 190

   70 EXPRESSION_SEQUENCE: EXPRESSION_SEQUENCE • PLUS EXPRESSION_SEQUENCE
   71                    | EXPRESSION_SEQUENCE • MINUS EXPRESSION_SEQUENCE
   72                    | EXPRESSION_SEQUENCE • MULTIPLY EXPRESSION_SEQUENCE
   73                    | EXPRESSION_SEQUENCE • DIVIDE EXPRESSION_SEQUENCE
   74                    | EXPRESSION_SEQUENCE • MOD EXPRESSION_SEQUENCE
  105 AFTER_FOR_CONDITION: DOWNTO EXPRESSION_SEQUENCE • $@15 DO $@16 BODY_OF_LOOP $@17 SEMICOLON

    PLUS      shift, and go to state 99
    MINUS     shift, and go to state 100
    MULTIPLY  shift, and go to state 101
    DIVIDE    shift, and go to state 102
    MOD       shift, and go to state 103

    $default  reduce using rule 102 ($@15)

    $@15  go to state 194


State 191

   28 ARRAY_DECLARATION: IDENTIFIER COLON ARRAY LBRACKET INT_NUMBER ARRAY_DOT INT_NUMBER RBRACKET OF DATATYPE SEMICOLON •

    $default  reduce using rule 28 (ARRAY_DECLARATION)


State 192

   60 AFTER_IF_THEN_BODY: ELSE $@5 • BODY_OF_CONDITIONAL $@6 SEMICOLON

    BEGINK  shift, and go to state 159

    BODY_OF_CONDITIONAL  go to state 195


State 193

  101 AFTER_FOR_CONDITION: TO EXPRESSION_SEQUENCE $@12 • DO $@13 BODY_OF_LOOP $@14 SEMICOLON

    DO  shift, and go to state 196


State 194

  105 AFTER_FOR_CONDITION: DOWNTO EXPRESSION_SEQUENCE $@15 • DO $@16 BODY_OF_LOOP $@17 SEMICOLON

    DO  shift, and go to state 197


State 195

   60 AFTER_IF_THEN_BODY: ELSE $@5 BODY_OF_CONDITIONAL • $@6 SEMICOLON

    $default  reduce using rule 59 ($@6)

    $@6  go to state 198


State 196

  101 AFTER_FOR_CONDITION: TO EXPRESSION_SEQUENCE $@12 DO • $@13 BODY_OF_LOOP $@14 SEMICOLON

    $default  reduce using rule 99 ($@13)

    $@13  go to state 199


State 197

  105 AFTER_FOR_CONDITION: DOWNTO EXPRESSION_SEQUENCE $@15 DO • $@16 BODY_OF_LOOP $@17 SEMICOLON

    $default  reduce using rule 103 ($@16)

    $@16  go to state 200


State 198

   60 AFTER_IF_THEN_BODY: ELSE $@5 BODY_OF_CONDITIONAL $@6 • SEMICOLON

    SEMICOLON  shift, and go to state 201


State 199

  101 AFTER_FOR_CONDITION: TO EXPRESSION_SEQUENCE $@12 DO $@13 • BODY_OF_LOOP $@14 SEMICOLON

    BEGINK  shift, and go to state 153

    BODY_OF_LOOP  go to state 202


State 200

  105 AFTER_FOR_CONDITION: DOWNTO EXPRESSION_SEQUENCE $@15 DO $@16 • BODY_OF_LOOP $@17 SEMICOLON

    BEGINK  shift, and go to state 153

    BODY_OF_LOOP  go to state 203


State 201

   60 AFTER_IF_THEN_BODY: ELSE $@5 BODY_OF_CONDITIONAL $@6 SEMICOLON •

    $default  reduce using rule 60 (AFTER_IF_THEN_BODY)


State 202

  101 AFTER_FOR_CONDITION: TO EXPRESSION_SEQUENCE $@12 DO $@13 BODY_OF_LOOP • $@14 SEMICOLON

    $default  reduce using rule 100 ($@14)

    $@14  go to state 204


State 203

  105 AFTER_FOR_CONDITION: DOWNTO EXPRESSION_SEQUENCE $@15 DO $@16 BODY_OF_LOOP • $@17 SEMICOLON

    $default  reduce using rule 104 ($@17)

    $@17  go to state 205


State 204

  101 AFTER_FOR_CONDITION: TO EXPRESSION_SEQUENCE $@12 DO $@13 BODY_OF_LOOP $@14 • SEMICOLON

    SEMICOLON  shift, and go to state 206


State 205

  105 AFTER_FOR_CONDITION: DOWNTO EXPRESSION_SEQUENCE $@15 DO $@16 BODY_OF_LOOP $@17 • SEMICOLON

    SEMICOLON  shift, and go to state 207


State 206

  101 AFTER_FOR_CONDITION: TO EXPRESSION_SEQUENCE $@12 DO $@13 BODY_OF_LOOP $@14 SEMICOLON •

    $default  reduce using rule 101 (AFTER_FOR_CONDITION)


State 207

  105 AFTER_FOR_CONDITION: DOWNTO EXPRESSION_SEQUENCE $@15 DO $@16 BODY_OF_LOOP $@17 SEMICOLON •

    $default  reduce using rule 105 (AFTER_FOR_CONDITION)
