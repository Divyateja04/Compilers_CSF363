[H[2J[3J=======================================
Test Case 11
Program OneHundredDoors;
var
   doors : Array[1..100] of Boolean;
   arr: array[1..100] of Integer;
   i, j	 : Integer;
begin
   for i := 1 to 100 do begin
      j := i;
	   j := j + i;
      j:= 'c';
   end;

   a := 1+---3;

   for i := 1 to 100 do begin
      write(i, " ",'c');
   end;

   if a then begin
	   write("only identifier without brackets");
   end;

   if (a) then begin
	   write("only identifier with brackets");
   end;

   if (1 * 7 = 8) then begin
	   write("only identifier with brackets");
   end;

   if arr[i] then begin
	   write("only array without brackets");
   end;

   if ((arr[i] - 3) = 4) then begin
	   write("only array without brackets");
   end;

   if (arr[i]) then begin
	   write("only array without brackets");
   end;

   writeln(a, 3, arr[3], "ada", 'a');

   if arr[i] and a then begin
	   write("array with boolean 1");
   end;

   if not doors[i] or not doors[i] then begin
	   write("array with boolean 2");
   end;

   while i < 3 do begin
      write("hello");
   end;

   while (i < 3) do begin
      write("hello");
   end;

   if (a + v + x - d = 1) and a = 1 then begin
	   write("expression");
   end;

   if (a +( v + x) - d = 1) and a = 1 then begin
	   write("expression");
   end;


   if (a + v + (x) - d) then begin
	   write("expression");
   end;

   if (not doors[i]) or (not doors[i]) then begin
	   write("array with boolean and bracket");
   end;

   if id and id > 2 then begin
	   write("array with boolean and bracket");
   end;

   if ((not doors[i]) or (not doors[i])) then begin
	   write("array with boolean and bracket");
   end;

   if (not doors[i]) or (not doors[i]) and not x then begin
	   write("array with boolean and bracket");
   end;

   if (not doors[i] or not doors[i]) then begin
	   write("array with boolean and bracket");
   end;
   write("inside single quore");

end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc

|7|============================

:000:>  for_start ;
:001:>  i  =  1 ;
:002:>  for_cond_start ;
:003:>  t0  =  i  <=  100 ;
:004:>  for_cond_end  =  t0  true: goto 005  false: goto 012 ;
:005:>  for_body_start ;
:006:>  j  =  i ;
:007:>  t1  =  j  +  i ;
:008:>  j  =  t1 ;
:009:>  j  =  'c' ;
:010:>  i  =  i  +  1 ;
:011:>  for_body_end  =  goto 002 ;
:012:>  for_end ;

:013:>  t2  =  -  3 ;
:014:>  t3  =  -  t2 ;
:015:>  t4  =  -  t3 ;
:016:>  t5  =  1  +  t4 ;
:017:>  a  =  t5 ;

:018:>  for_start ;
:019:>  i  =  1 ;
:020:>  for_cond_start ;
:021:>  t6  =  i  <=  100 ;
:022:>  for_cond_end  =  t6  true: goto 023  false: goto 026 ;
:023:>  for_body_start ;
:024:>  i  =  i  +  1 ;
:025:>  for_body_end  =  goto 020 ;
:026:>  for_end ;


:027:>  if_start ;
:028:>  if_cond_end  =  a  true: goto 029  false: goto 031 ;
:029:>  ifthen_body_start ;
:030:>  ifthen_body_end  =  goto 031 ;
:031:>  if_end ;


:032:>  if_start ;
:033:>  if_cond_end  =  a  true: goto 034  false: goto 036 ;
:034:>  ifthen_body_start ;
:035:>  ifthen_body_end  =  goto 036 ;
:036:>  if_end ;


:037:>  if_start ;
:038:>  t7  =  1  *  7 ;
:039:>  t8  =  t7  =  8 ;
:040:>  if_cond_end  =  t8  true: goto 041  false: goto 043 ;
:041:>  ifthen_body_start ;
:042:>  ifthen_body_end  =  goto 043 ;
:043:>  if_end ;


:044:>  if_start ;
:045:>  t9  =  i  *  Integer ;
:046:>  t10  =  t9  +  &arr ;
:047:>  t11  =  *t10 ;
:048:>  if_cond_end  =  t11  true: goto 049  false: goto 051 ;
:049:>  ifthen_body_start ;
:050:>  ifthen_body_end  =  goto 051 ;
:051:>  if_end ;


:052:>  if_start ;
:053:>  t12  =  i  *  Integer ;
:054:>  t13  =  t12  +  &arr ;
:055:>  t14  =  *t13 ;
:056:>  t15  =  t14  -  3 ;
:057:>  t16  =  t15  =  4 ;
:058:>  if_cond_end  =  t16  true: goto 059  false: goto 061 ;
:059:>  ifthen_body_start ;
:060:>  ifthen_body_end  =  goto 061 ;
:061:>  if_end ;


:062:>  if_start ;
:063:>  t17  =  i  *  Integer ;
:064:>  t18  =  t17  +  &arr ;
:065:>  t19  =  *t18 ;
:066:>  if_cond_end  =  t19  true: goto 067  false: goto 069 ;
:067:>  ifthen_body_start ;
:068:>  ifthen_body_end  =  goto 069 ;
:069:>  if_end ;

:070:>  t20  =  3  *  Integer ;

:071:>  if_start ;
:072:>  t21  =  i  *  Integer ;
:073:>  t22  =  t21  +  &arr ;
:074:>  t23  =  *t22 ;
:075:>  t24  =  t23  &  a ;
:076:>  if_cond_end  =  t24  true: goto 077  false: goto 079 ;
:077:>  ifthen_body_start ;
:078:>  ifthen_body_end  =  goto 079 ;
:079:>  if_end ;


:080:>  if_start ;
:081:>  t25  =  i  *  Boolean ;
:082:>  t26  =  t25  +  &doors ;
:083:>  t27  =  *t26 ;
:084:>  t28  =  !  t27 ;
:085:>  t29  =  i  *  Boolean ;
:086:>  t30  =  t29  +  &doors ;
:087:>  t31  =  *t30 ;
:088:>  t32  =  !  t31 ;
:089:>  t33  =  t28  |  t32 ;
:090:>  if_cond_end  =  t33  true: goto 091  false: goto 093 ;
:091:>  ifthen_body_start ;
:092:>  ifthen_body_end  =  goto 093 ;
:093:>  if_end ;


:094:>  while_start ;
:095:>  while_cond_start ;
:096:>  t34  =  i  <  3 ;
:097:>  while_cond_end  =  t34  true: goto 098  false: goto 100 ;
:098:>  while_body_start ;
:099:>  while_body_end  =  goto 095 ;
:100:>  while_end ;


:101:>  while_start ;
:102:>  while_cond_start ;
:103:>  t35  =  i  <  3 ;
:104:>  while_cond_end  =  t35  true: goto 105  false: goto 107 ;
:105:>  while_body_start ;
:106:>  while_body_end  =  goto 102 ;
:107:>  while_end ;


:108:>  if_start ;
:109:>  t36  =  a  +  v ;
:110:>  t37  =  t36  +  x ;
:111:>  t38  =  t37  -  d ;
:112:>  t39  =  t38  =  1 ;
:113:>  t40  =  a  =  1 ;
:114:>  t41  =  t39  &  t40 ;
:115:>  if_cond_end  =  t41  true: goto 116  false: goto 118 ;
:116:>  ifthen_body_start ;
:117:>  ifthen_body_end  =  goto 118 ;
:118:>  if_end ;


:119:>  if_start ;
:120:>  t42  =  v  +  x ;
:121:>  t43  =  a  +  t42 ;
:122:>  t44  =  t43  -  d ;
:123:>  t45  =  t44  =  1 ;
:124:>  t46  =  a  =  1 ;
:125:>  t47  =  t45  &  t46 ;
:126:>  if_cond_end  =  t47  true: goto 127  false: goto 129 ;
:127:>  ifthen_body_start ;
:128:>  ifthen_body_end  =  goto 129 ;
:129:>  if_end ;


:130:>  if_start ;
:131:>  t48  =  a  +  v ;
:132:>  t49  =  t48  +  x ;
:133:>  t50  =  t49  -  d ;
:134:>  if_cond_end  =  t50  true: goto 135  false: goto 137 ;
:135:>  ifthen_body_start ;
:136:>  ifthen_body_end  =  goto 137 ;
:137:>  if_end ;


:138:>  if_start ;
:139:>  t51  =  i  *  Boolean ;
:140:>  t52  =  t51  +  &doors ;
:141:>  t53  =  *t52 ;
:142:>  t54  =  !  t53 ;
:143:>  t55  =  i  *  Boolean ;
:144:>  t56  =  t55  +  &doors ;
:145:>  t57  =  *t56 ;
:146:>  t58  =  !  t57 ;
:147:>  t59  =  t54  |  t58 ;
:148:>  if_cond_end  =  t59  true: goto 149  false: goto 151 ;
:149:>  ifthen_body_start ;
:150:>  ifthen_body_end  =  goto 151 ;
:151:>  if_end ;


:152:>  if_start ;
:153:>  t60  =  id  >  2 ;
:154:>  t61  =  id  &  t60 ;
:155:>  if_cond_end  =  t61  true: goto 156  false: goto 158 ;
:156:>  ifthen_body_start ;
:157:>  ifthen_body_end  =  goto 158 ;
:158:>  if_end ;


:159:>  if_start ;
:160:>  t62  =  i  *  Boolean ;
:161:>  t63  =  t62  +  &doors ;
:162:>  t64  =  *t63 ;
:163:>  t65  =  !  t64 ;
:164:>  t66  =  i  *  Boolean ;
:165:>  t67  =  t66  +  &doors ;
:166:>  t68  =  *t67 ;
:167:>  t69  =  !  t68 ;
:168:>  t70  =  t65  |  t69 ;
:169:>  if_cond_end  =  t70  true: goto 170  false: goto 172 ;
:170:>  ifthen_body_start ;
:171:>  ifthen_body_end  =  goto 172 ;
:172:>  if_end ;


:173:>  if_start ;
:174:>  t71  =  i  *  Boolean ;
:175:>  t72  =  t71  +  &doors ;
:176:>  t73  =  *t72 ;
:177:>  t74  =  !  t73 ;
:178:>  t75  =  i  *  Boolean ;
:179:>  t76  =  t75  +  &doors ;
:180:>  t77  =  *t76 ;
:181:>  t78  =  !  t77 ;
:182:>  t79  =  t74  |  t78 ;
:183:>  t80  =  !  x ;
:184:>  t81  =  t79  &  t80 ;
:185:>  if_cond_end  =  t81  true: goto 186  false: goto 188 ;
:186:>  ifthen_body_start ;
:187:>  ifthen_body_end  =  goto 188 ;
:188:>  if_end ;


:189:>  if_start ;
:190:>  t82  =  i  *  Boolean ;
:191:>  t83  =  t82  +  &doors ;
:192:>  t84  =  *t83 ;
:193:>  t85  =  !  t84 ;
:194:>  t86  =  i  *  Boolean ;
:195:>  t87  =  t86  +  &doors ;
:196:>  t88  =  *t87 ;
:197:>  t89  =  !  t88 ;
:198:>  t90  =  t85  |  t89 ;
:199:>  if_cond_end  =  t90  true: goto 200  false: goto 202 ;
:200:>  ifthen_body_start ;
:201:>  ifthen_body_end  =  goto 202 ;
:202:>  if_end ;

============================



Parsing completed successfully
