%{
#include <stdio.h>
#include <stdlib.h>
extern FILE *yyin;
%}

%token PROGRAM INTEGER REAL BEGINK END NL BOOLEAN CHAR IF ELSE TO DOWNTO VAR ARRAY FOR WHILE DO NOT AND OR READ WRITE
%token PLUS MINUS MULTIPLY DIVIDE MOD 
%token EQUAL LESS GREATER LESSEQUAL GREATEREQUAL NOTEQUAL
%token NUMBER 
%token IDENTIFIER
%token SEMICOLON COMMA COLON DOT LPAREN RPAREN LBRACKET RBRACKET STRING THEN OF

%%

stmt: MAINPROGRAM NL
;

MAINPROGRAM: PROGRAMSTRUCT VARIABLES PROGRAMBLOCK
;

PROGRAMSTRUCT: PROGRAM IDENTIFIER SEMICOLON NL
;

VARIABLES: VAR NL VARS NL
;

VARS: MULTIVAR VARS | /* empty */
;

MULTIVAR: VARIABLELIST COLON DATATYPE SEMICOLON NL | ARRAYDEF
;

VARIABLELIST: IDENTIFIER ',' VARIABLELIST | IDENTIFIER
;

PROGRAMBLOCK: BEGINK BODY END DOT
;

BODY: STATEMENTLIST NL BODY | /* empty */
;

STATEMENTLIST: READ_STATEMENT | WRITE_STATEMENT | ASSIGNMENT_STATEMENT | BLOCK_STATEMENT | CONDITIONAL_STATEMENT | LOOPING_STATEMENT
;

READ_STATEMENT: READ LPAREN IDENTIFIER RPAREN SEMICOLON NL
;

WRITE_STATEMENT: WRITE LPAREN IDENTIFIER RPAREN SEMICOLON NL | WRITE LPAREN STRING RPAREN SEMICOLON NL
;

ASSIGNMENT_STATEMENT: IDENTIFIER COLON EQUAL EXPRESSION SEMICOLON NL
;

EXPRESSION: EXPRESSIONID | EXPRESSIONNUM | EXPRESSIONOP
;

OPERATOR: PLUS | MINUS | MULTIPLY | DIVIDE | MOD

EXPRESSIONOP: IDENTIFIER OPERATOR IDENTIFIER | IDENTIFIER OPERATOR NUMBER | NUMBER OPERATOR IDENTIFIER 
;

EXPRESSIONNUM: NUMBER
;

EXPRESSIONID: IDENTIFIER
;

BLOCK_STATEMENT: BEGINK BODY END SEMICOLON
;

CONDITION: IDENTIFIER RELOP IDENTIFIER | IDENTIFIER RELOP NUMBER | NUMBER RELOP IDENTIFIER
;

RELOP: EQUAL | LESS |  GREATER | LESSEQUAL | GREATEREQUAL | NOTEQUAL
;

CONDITIONAL_STATEMENT: SIMPLEIF | IFTHENELSE
;

SIMPLEIF: IF CONDITION THEN BLOCK_STATEMENT
;

IFTHENELSE: IF CONDITION THEN BLOCK_STATEMENT ELSE BLOCK_STATEMENT
;

LOOPING_STATEMENT: FORTO | FORDOWNTO | WHILEDO
;

FORTO: FOR IDENTIFIER COLON EQUAL NUMBER TO EXPRESSIONOP DO BLOCK_STATEMENT | FOR IDENTIFIER COLON EQUAL NUMBER TO EXPRESSIONID DO BLOCK_STATEMENT | FOR IDENTIFIER COLON EQUAL NUMBER TO EXPRESSIONNUM DO BLOCK_STATEMENT 
;

FORDOWNTO: FOR IDENTIFIER COLON EQUAL NUMBER DOWNTO EXPRESSIONOP DO BLOCK_STATEMENT | FOR IDENTIFIER COLON EQUAL NUMBER DOWNTO EXPRESSIONID DO BLOCK_STATEMENT | FOR IDENTIFIER COLON EQUAL NUMBER DOWNTO EXPRESSIONNUM DO BLOCK_STATEMENT 
;

WHILEDO: WHILE LPAREN CONDITION RPAREN DO NL BLOCK_STATEMENT
;

DATATYPE: INTEGER | REAL | BOOLEAN | CHAR 
;

ARRAYDEF: IDENTIFIER COLON ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF DATATYPE SEMICOLON
;

%%

void main()
{
    yyin = fopen("sample.txt", "r");
    if(yyin == NULL){
        printf("File not found\n");
        exit(1);
    }
    else{
        printf("File found\n");
        yyparse();
    }
}

void yyerror(){
    printf("\n\nSyntax error\n");
}