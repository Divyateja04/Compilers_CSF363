%{
#include <stdio.h>
#include <stdlib.h>
extern FILE *yyin;
int printLogs = 1;
%}

%token PROGRAM INTEGER REAL BEGINK END NL BOOLEAN CHAR IF ELSE TO DOWNTO VAR ARRAY FOR WHILE DO NOT AND OR READ WRITE
%token PLUS MINUS MULTIPLY DIVIDE MOD 
%token EQUAL LESS GREATER LESSEQUAL GREATEREQUAL NOTEQUAL
%token NUMBER 
%token IDENTIFIER
%token SEMICOLON COMMA COLON DOT LPAREN RPAREN LBRACKET RBRACKET STRING THEN OF

%%
stmt: { if(printLogs) printf("Parsing found\n"); } MAINPROGRAM NLZEROORMORE
;

NLZEROORMORE: { if(printLogs) printf("NLZEROORMORE found\n"); } NL NLZEROORMORE 
| /* empty */

MAINPROGRAM: { if(printLogs) printf("MAINPROGRAM found\n"); } PROGRAMSTRUCT VARIABLES PROGRAMBLOCK
;

PROGRAMSTRUCT: { if(printLogs) printf("PROGRAMSTRUCT found\n"); } PROGRAM IDENTIFIER SEMICOLON NLZEROORMORE 

VARIABLES: { if(printLogs) printf("VARIABLES found\n"); } VAR NLZEROORMORE VARS NLZEROORMORE 
;

VARS: { if(printLogs) printf("VARS found\n"); } MULTIVAR VARS | NLZEROORMORE
;

MULTIVAR: { if(printLogs) printf("MULTIVAR found 1\n"); } VARIABLELIST { if(printLogs) printf("COLON ended\n"); } COLON DATATYPE SEMICOLON NLZEROORMORE 
| { if(printLogs) printf("MULTIVAR found 2\n"); } ARRAYDEF
;

VARIABLELIST: IDENTIFIER AFTER_IDENTIFIER
;

AFTER_IDENTIFIER: COMMA VARIABLELIST 
| /* empty */
;

DATATYPE:  { if(printLogs) printf("DATATYPE found 1\n"); } INTEGER 
| { if(printLogs) printf("DATATYPE found 2\n"); } REAL 
| { if(printLogs) printf("DATATYPE found 3\n"); } BOOLEAN 
| { if(printLogs) printf("DATATYPE found 4\n"); } CHAR 
;

PROGRAMBLOCK: { if(printLogs) printf("PROGRAMBLOCK found\n"); } BEGINK NLZEROORMORE BODY END DOT NLZEROORMORE
;

BODY: { if(printLogs) printf("BODY found 1\n"); } STATEMENTLIST NLZEROORMORE BODY 
| { if(printLogs) printf("BODY found 2\n"); } /* empty */
;

STATEMENTLIST: { if(printLogs) printf("READ found\n"); } READ_STATEMENT 
| { if(printLogs) printf("WRITE found\n"); } WRITE_STATEMENT 
| { if(printLogs) printf("ASSIGNMENT found\n"); } ASSIGNMENT_STATEMENT 
| { if(printLogs) printf("BLOCK found\n"); } BLOCK_STATEMENT 
| { if(printLogs) printf("CONDITIONAL found\n"); } CONDITIONAL_STATEMENT 
| { if(printLogs) printf("LOOPING found\n"); } LOOPING_STATEMENT
;

READ_STATEMENT: READ LPAREN IDENTIFIER RPAREN SEMICOLON NLZEROORMORE
;

WRITE_STATEMENT: WRITE LPAREN WRITE_CONTENT RPAREN SEMICOLON NLZEROORMORE { if(printLogs) printf("WRITE over\n"); } 
;

WRITE_CONTENT: { if(printLogs) printf("WRITE_STRING found\n"); } STRING 
| { if(printLogs) printf("WRITE_IDENTIFIER found\n"); } IDENTIFIER 
| { if(printLogs) printf("WRITE_NUMBER found\n"); } NUMBER
;

ASSIGNMENT_STATEMENT: IDENTIFIER COLON EQUAL EXPRESSION SEMICOLON NLZEROORMORE
;

EXPRESSION: EXPRESSIONID 
| EXPRESSIONNUM 
| EXPRESSIONOP
;

OPERATOR: PLUS 
| MINUS 
| MULTIPLY 
| DIVIDE 
| MOD

EXPRESSIONOP: IDENTIFIER OPERATOR IDENTIFIER 
| IDENTIFIER OPERATOR NUMBER 
| NUMBER OPERATOR IDENTIFIER 
;

EXPRESSIONNUM: NUMBER
;

EXPRESSIONID: IDENTIFIER
;

BLOCK_STATEMENT: BEGINK NLZEROORMORE BODY END SEMICOLON NLZEROORMORE
;

CONDITION: IDENTIFIER RELOP IDENTIFIER 
| IDENTIFIER RELOP NUMBER 
| NUMBER RELOP IDENTIFIER
;

RELOP: EQUAL 
| LESS 
| GREATER 
| LESSEQUAL 
| GREATEREQUAL 
| NOTEQUAL
;

CONDITIONAL_STATEMENT: SIMPLEIF | IFTHENELSE
;

SIMPLEIF: IF CONDITION THEN BLOCK_STATEMENT
;

IFTHENELSE: IF CONDITION THEN BLOCK_STATEMENT ELSE BLOCK_STATEMENT
;

LOOPING_STATEMENT: FORTO 
| FORDOWNTO 
| WHILEDO
;

FORTO: FOR IDENTIFIER COLON EQUAL NUMBER TO EXPRESSIONOP DO BLOCK_STATEMENT 
| FOR IDENTIFIER COLON EQUAL NUMBER TO EXPRESSIONID DO BLOCK_STATEMENT 
| FOR IDENTIFIER COLON EQUAL NUMBER TO EXPRESSIONNUM DO BLOCK_STATEMENT 
;

FORDOWNTO: FOR IDENTIFIER COLON EQUAL NUMBER DOWNTO EXPRESSIONOP DO BLOCK_STATEMENT 
| FOR IDENTIFIER COLON EQUAL NUMBER DOWNTO EXPRESSIONID DO BLOCK_STATEMENT 
| FOR IDENTIFIER COLON EQUAL NUMBER DOWNTO EXPRESSIONNUM DO BLOCK_STATEMENT 
;

WHILEDO: WHILE LPAREN CONDITION RPAREN DO NLZEROORMORE BLOCK_STATEMENT
;

ARRAYDEF: IDENTIFIER COLON ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF DATATYPE SEMICOLON NLZEROORMORE
;

%%

void main()
{
    yyin = fopen("sample.txt", "r");
    if(yyin == NULL){
        if(printLogs) printf("File not found\n");
        exit(1);
    }
    else{
        if(printLogs) printf("File found\n");
        yyparse();
    }
}

void yyerror(){
    if(printLogs) printf("\n\nSyntax error\n");
}