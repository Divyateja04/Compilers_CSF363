
=======================================
Test Case 1
program ArrayAverage;
var
  numbers: array[1..5] of Integer;
  i, a, b, d, sum, digit, number, count : Integer;
  average : real;
  x: boolean;
  c: char;
begin
  i := 100;
  i := i + i * (i - i) + (i - i) * d;
  x := (7 < 5) and (6 > 5);
  a := -3;
  count := 0;
  number := 0;
  digit := 0.0;

  write("Enter 5 integer values:");

  c := 'c';
  write(c);

  for i := 1 to 5 do
  begin
    read(numbers[i]);
  end;

  for i := 1 to 5 do
  begin
    write(numbers[i]);
  end;

  sum := 0;
  for i := 1 to 5 do
  begin
    sum := sum + 6 * 7 + numbers[i];
  end;

  if x then
  begin
    write("x is true");
  end
  else
  begin
    write("x is false");
  end;


  while number <> 0 do
  begin
    digit := number - (number / 10) * 10;
    
    if digit <> 0 then
    begin
      count:=count+1;
    end;

    number := number / 10;
  end;

  average := sum / 5;
  write("The sum and average are: "); 
  write(sum, average);
end.Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 10 ::> d -> Variable not set

Line: 15 ::> digit -> Invalid data type for assignment

Line: 35 ::> numbers[7] -> Array index not set

Line: 38 ::> Invalid data type for conditional statement

Line: 50 ::> digit -> Invalid data type for assignment

Line: 52 ::> Invalid data type for conditional statement

Line: 57 ::> number -> Invalid data type for assignment


Parsing completed successfully
========
Symbol Table:
========
Array Name: numbers, Data Type: int, Min Index: 1, Max Index: 5
ID Name: count, Data Type: int, Value: 0
ID Name: number, Data Type: int, Value: 0
ID Name: digit, Data Type: int, Value: 0
ID Name: sum, Data Type: int, Value: 0
ID Name: d, Data Type: int, Value: 0
ID Name: b, Data Type: int, Value: 0
ID Name: a, Data Type: int, Value: 0
ID Name: i, Data Type: int, Value: 0
ID Name: average, Data Type: real, Value: 0
ID Name: x, Data Type: boolean, Value: 0
ID Name: c, Data Type: char, Value: 0
=======================================
Test Case 2
program MaxValueArray;
var
  numbers: array[1..10] of Integer;
  i, maxValue: Integer;
begin
  write("Enter 10 integer values:");
  for i := 1 to 10 do
  begin
    read(numbers[i]);
  end;
  maxValue := numbers[1];
  for i := 2 to 10 do
  begin
    if numbers[i] > maxValue then
    begin
      maxValue := numbers[i];
    end;
  end;
  write("The maximum value is: ");  
  write(maxValue);
end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 9 ::> i -> Variable must be integer and must be set before it's accessed

Line: 11 ::> numbers[10] -> Array index not set

Line: 14 ::> i -> Variable must be integer and must be set before it's accessed

Line: 14 ::> numbers[10] -> Array index not set

Line: 16 ::> i -> Variable must be integer and must be set before it's accessed

Line: 16 ::> numbers[10] -> Array index not set

Line: 14 ::> Invalid data type for conditional statement


Parsing completed successfully
========
Symbol Table:
========
Array Name: numbers, Data Type: int, Min Index: 1, Max Index: 10
ID Name: maxValue, Data Type: int, Value: 0
ID Name: i, Data Type: int, Value: 0
=======================================
Test Case 3
program ReverseNumber;
var
  number, reversedNumber, remainder: Integer;
begin
  write("Enter a number to reverse:", 3, number);
  read(number);
  reversedNumber := 0;
  while number <> 0 do
  begin
    remainder := number % 10;
    reversedNumber := reversedNumber * 10 + remainder;
    number := number / 10;
  end;
  write("The reversed number is: ");
  write(reversedNumber);
end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 8 ::> number -> Variable not set

Line: 10 ::> number -> Variable not set

Line: 12 ::> number -> Variable not set

Line: 12 ::> number -> Invalid data type for assignment


Parsing completed successfully
========
Symbol Table:
========
ID Name: remainder, Data Type: int, Value: 0
ID Name: reversedNumber, Data Type: int, Value: 0
ID Name: number, Data Type: int, Value: 0
=======================================
Test Case 4
program NumberOfDigits;
var
  number, count, digit: Integer;
begin
  write("Enter a number:");
  read(number);
  count := 0;
  while number <> 0 do
  begin
    digit := number - (number / 10) * 10;
    
    if digit <> 0 then
      begin
      count:=count+1;
      end;
    number := number / 10;
  end;
  write("The number of digits is: ");
  write(count);
end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 8 ::> number -> Variable not set

Line: 10 ::> number -> Variable not set

Line: 10 ::> number -> Variable not set

Line: 10 ::> digit -> Invalid data type for assignment

Line: 12 ::> Invalid data type for conditional statement

Line: 16 ::> number -> Variable not set

Line: 16 ::> number -> Invalid data type for assignment


Parsing completed successfully
========
Symbol Table:
========
ID Name: digit, Data Type: int, Value: 0
ID Name: count, Data Type: int, Value: 0
ID Name: number, Data Type: int, Value: 0
=======================================
Test Case 5
program NumberOfDigits;
var
  number, count: Integer;
begin
  write("Enter a number:");
  read(number);
  count := 0;
  while number <> 0 do
  begin
    if number <> 0 then
    begin
      count:=count+1;
    end
    else 
    begin
     count :=count;
    end; 
    number := number / 10;
  end;
  write("The number of digits is: ");
  write(count);
end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 8 ::> number -> Variable not set

Line: 10 ::> number -> Variable not set

Line: 10 ::> Invalid data type for conditional statement

Line: 18 ::> number -> Variable not set

Line: 18 ::> number -> Invalid data type for assignment


Parsing completed successfully
========
Symbol Table:
========
ID Name: count, Data Type: int, Value: 0
ID Name: number, Data Type: int, Value: 0
=======================================
Test Case 6
program FactorialCalculation;
var
  number, factorial, i: Integer;
begin
  write("Enter a number to calculate its factorial:");
  read(number);
  factorial := 1;
  for i := number downto 1 do
  begin
    factorial := factorial * i;
  end;
  write("The factorial is: ");
  write(factorial);
end.


Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 8 ::> number -> Variable not set

Line: 10 ::> i -> Variable not set


Parsing completed successfully
========
Symbol Table:
========
ID Name: i, Data Type: int, Value: 0
ID Name: factorial, Data Type: int, Value: 0
ID Name: number, Data Type: int, Value: 0
=======================================
Test Case 7
program SumOfSquares;
var
  number, sum, i: Integer;
begin
  write("Enter a number to calculate the sum of squares up to that number:");
  read(number);
  sum := 0;
  for i := 1 to number do
  begin
    sum := sum + (i * i);
  end;
  write("The sum of squares up is");
  write(sum);
end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc

=======================================
Test Case 8
program forif;
var
  i, j: Integer;
begin
  for i := 1 to 20 do
   begin
     if i % 3 = 0 then 
      begin
        j := i + 2; 
        write(j);
      end;
    end;

end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 7 ::> i -> Variable not set

Line: 9 ::> i -> Variable not set

Line: 7 ::> Invalid data type for conditional statement


Parsing completed successfully
========
Symbol Table:
========
ID Name: j, Data Type: int, Value: 0
ID Name: i, Data Type: int, Value: 0
=======================================
Test Case 9
program Example9;
var
  i: Integer;
begin
  i := 10;
  if i > 10 then
  begin
    i := 10;
    i := i - 1;
    write(i);
  end
  else
  begin
    i := 20;
    write(i);
  end;
end.Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 6 ::> Invalid data type for conditional statement


Parsing completed successfully
========
Symbol Table:
========
ID Name: i, Data Type: int, Value: 0
=======================================
Test Case 10
program forif;
var
  i, j, a, b, x: Integer;
  arr: array[1..20] of Integer;
begin
  for i := 1 to 20 do
  begin
    if i % 3 = 0 then 
    begin
      j := i + 2; 
      write(j);
      arr[1] := i;
      arr[x] := i;
      arr[1] := i;

      write(a, " ", b, " ", arr[i]);
    end;
  end;

  if i % 3 = 0 then
  begin
    for i := 3 downto 0 do
    begin
      write(i, " ", 5);
    end;
  end
  else
  begin
    for i := 3 downto 0 do
    begin
      write(i, " ", 5);
    end;
  end;
end.Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 8 ::> i -> Variable not set

Line: 10 ::> i -> Variable not set

Line: 12 ::> i -> Variable not set

Line: 13 ::> x -> Variable must be integer and must be set before it's accessed

Line: 13 ::> i -> Variable not set

Line: 14 ::> i -> Variable not set

Line: 16 ::> i -> Variable must be integer and must be set before it's accessed

Line: 16 ::> arr -> Identifier not a variable

Line: 8 ::> Invalid data type for conditional statement

Line: 20 ::> i -> Variable not set

Line: 20 ::> Invalid data type for conditional statement


Parsing completed successfully
========
Symbol Table:
========
ID Name: x, Data Type: int, Value: 0
ID Name: b, Data Type: int, Value: 0
ID Name: a, Data Type: int, Value: 0
ID Name: j, Data Type: int, Value: 0
ID Name: i, Data Type: int, Value: 0
Array Name: arr, Data Type: int, Min Index: 1, Max Index: 20
=======================================
Test Case 11
Program OneHundredDoors;
var
   doors : Array[1..100] of Boolean;
   i, j	 : Integer;
begin
   for i := 1 to 100 do begin
      j := i;
	   j := j + i;
      j:= 'c';
   end;

   a := 1+---3;

   for i := 1 to 100 do begin
      write(i, " ",'c');
   end;

   if a then begin
	   write("only identifier without brackets");
   end;

   if (a) then begin
	   write("only identifier with brackets");
   end;

   if (1 * 7 = 8) then begin
	   write("only identifier with brackets");
   end;

   if arr[i] then begin
	   write("only array without brackets");
   end;

   if ((arr[i] - 3) = 4) then begin
	   write("only array without brackets");
   end;

   if (arr[i]) then begin
	   write("only array without brackets");
   end;

   writeln(a, 3, arr[arr[arr[3]]], "ada", 'a');

   if arr[i] and a then begin
	   write("array with boolean 1");
   end;

   if not doors[i] or not doors[i] then begin
	   write("array with boolean 2");
   end;

   while i < 3 do begin
      write("hello");
   end;

   while (i < 3) do begin
      write("hello");
   end;

   if (a + v + x - d = 1) and a = 1 then begin
	   write("expression");
   end;

   if (a +( v + x) - d = 1) and a = 1 then begin
	   write("expression");
   end;


   if (a + v + (x) - d) then begin
	   write("expression");
   end;

   if (not doors[i]) or (not doors[i]) then begin
	   write("array with boolean and bracket");
   end;

   if id and id > 2 then begin
	   write("array with boolean and bracket");
   end;

   if ((not doors[i]) or (not doors[i])) then begin
	   write("array with boolean and bracket");
   end;

   if (not doors[i]) or (not doors[i]) and not x then begin
	   write("array with boolean and bracket");
   end;

   if (not doors[i] or not doors[i]) then begin
	   write("array with boolean and bracket");
   end;
   write("inside single quore");

end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 7 ::> i -> Variable not set

Line: 8 ::> i -> Variable not set

Line: 9 ::> j -> Invalid data type for assignment

Line: 12 ::> a -> Variable not declared

Line: 15 ::> Invalid data type for character

Line: 18 ::> a -> Variable not declared

Line: 18 ::> Invalid data type for conditional statement

Line: 22 ::> a -> Variable not declared

Line: 22 ::> Invalid data type for conditional statement

Line: 23 ::> Invalid data type for conditional statement

Line: 30 ::> i -> Variable must be integer and must be set before it's accessed

Line: 30 ::> Identifier not found

Line: 30 ::> Invalid data type for conditional statement

Line: 34 ::> i -> Variable must be integer and must be set before it's accessed

Line: 34 ::> Identifier not found

Line: 34 ::> Invalid data type for subtraction, found character

Line: 31 ::> Invalid data type for conditional statement
string boolean

Line: 31 ::> Invalid data type for conditional statement

Line: 38 ::> i -> Variable must be integer and must be set before it's accessed

Line: 38 ::> Identifier not found

Line: 38 ::> Invalid data type for conditional statement

Line: 42 ::> arr -> Array not found

Line: 42 ::> arr -> Array not found

Line: 42 ::> Invalid data type for character

Line: 42 ::> arr -> Variable not declared

Line: 42 ::> a -> Variable not declared

Line: 44 ::> i -> Variable must be integer and must be set before it's accessed

Line: 44 ::> Identifier not found

Line: 44 ::> a -> Variable not declared

Line: 44 ::> Invalid data type for conditional statement

Line: 44 ::> Invalid data type for conditional statement

Line: 48 ::> i -> Variable must be integer and must be set before it's accessed

Line: 48 ::> doors[array with boolean 1] -> Array index not set

Line: 45 ::> Invalid data type for conditional statement

Line: 48 ::> i -> Variable must be integer and must be set before it's accessed

Line: 48 ::> doors[array with boolean 1] -> Array index not set

Line: 48 ::> Invalid data type for conditional statement

Line: 48 ::> Invalid data type for conditional statement

Line: 52 ::> i -> Variable not set

Line: 56 ::> i -> Variable not set

Line: 60 ::> a -> Variable not declared

Line: 60 ::> v -> Variable not declared

Line: 60 ::> Invalid data type for addition

Line: 60 ::> x -> Variable not declared

Line: 60 ::> Invalid data type for addition

Line: 60 ::> d -> Variable not declared

Line: 60 ::> Invalid data type for subtraction, found character

Line: 57 ::> Invalid data type for conditional statement
string boolean

Line: 60 ::> a -> Variable not declared

Line: 57 ::> Invalid data type for conditional statement

Line: 64 ::> a -> Variable not declared

Line: 64 ::> v -> Variable not declared

Line: 64 ::> x -> Variable not declared

Line: 64 ::> Invalid data type for addition

Line: 64 ::> Invalid data type for addition

Line: 64 ::> d -> Variable not declared

Line: 64 ::> Invalid data type for subtraction, found character

Line: 61 ::> Invalid data type for conditional statement
string boolean

Line: 64 ::> a -> Variable not declared

Line: 61 ::> Invalid data type for conditional statement

Line: 69 ::> a -> Variable not declared

Line: 69 ::> v -> Variable not declared

Line: 69 ::> Invalid data type for addition

Line: 69 ::> x -> Variable not declared

Line: 69 ::> Invalid data type for addition

Line: 69 ::> d -> Variable not declared

Line: 69 ::> Invalid data type for subtraction, found character

Line: 69 ::> Invalid data type for conditional statement

Line: 73 ::> i -> Variable must be integer and must be set before it's accessed

Line: 73 ::> doors[expression] -> Array index not set

Line: 70 ::> Invalid data type for conditional statement

Line: 73 ::> i -> Variable must be integer and must be set before it's accessed

Line: 73 ::> doors[expression] -> Array index not set

Line: 73 ::> Invalid data type for conditional statement

Line: 73 ::> Invalid data type for conditional statement

Line: 77 ::> id -> Variable not declared

Line: 77 ::> id -> Variable not declared

Line: 77 ::> Invalid data type for conditional statement
string int

Line: 77 ::> Invalid data type for conditional statement

Line: 77 ::> Invalid data type for conditional statement

Line: 81 ::> i -> Variable must be integer and must be set before it's accessed

Line: 81 ::> doors[array with boolean and brackQ] -> Array index not set

Line: 78 ::> Invalid data type for conditional statement

Line: 81 ::> i -> Variable must be integer and must be set before it's accessed

Line: 81 ::> doors[array with boolean and brackQ] -> Array index not set

Line: 81 ::> Invalid data type for conditional statement

Line: 81 ::> Invalid data type for conditional statement

Line: 85 ::> i -> Variable must be integer and must be set before it's accessed

Line: 85 ::> doors[array with boolean and brackU] -> Array index not set

Line: 82 ::> Invalid data type for conditional statement

Line: 85 ::> i -> Variable must be integer and must be set before it's accessed

Line: 85 ::> doors[array with boolean and brackU] -> Array index not set

Line: 85 ::> Invalid data type for conditional statement

Line: 85 ::> x -> Variable not declared

Line: 85 ::> Invalid data type for conditional statement

Line: 85 ::> Invalid data type for conditional statement

Line: 89 ::> i -> Variable must be integer and must be set before it's accessed

Line: 89 ::> doors[array with boolean and brackY] -> Array index not set

Line: 86 ::> Invalid data type for conditional statement

Line: 89 ::> i -> Variable must be integer and must be set before it's accessed

Line: 89 ::> doors[array with boolean and brackY] -> Array index not set

Line: 89 ::> Invalid data type for conditional statement

Line: 89 ::> Invalid data type for conditional statement


Parsing completed successfully
========
Symbol Table:
========
Array Name: doors, Data Type: boolean, Min Index: 1, Max Index: 100
ID Name: j, Data Type: int, Value: 0
ID Name: i, Data Type: int, Value: 0
=======================================
Test Case 12
program Mean;
var
  i, n, sum: integer;
  mean: real;
begin
  n := -20;
  sum := 0;

  a := (-12) + 6;
  
  for i := 1 to n do
  begin
    sum := sum + i;
  end;
  
  mean := sum / n;
  
  write("The mean of the numbers from 1 to 20 is ", mean);
end.Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 9 ::> a -> Variable not declared

Line: 13 ::> i -> Variable not set


Parsing completed successfully
========
Symbol Table:
========
ID Name: sum, Data Type: int, Value: 0
ID Name: n, Data Type: int, Value: 0
ID Name: i, Data Type: int, Value: 0
ID Name: mean, Data Type: real, Value: 0
=======================================
Test Case 13
program NumberOfDigits;
var
  number, count: Integer;
  flag : boolean; 
begin
  write("Enter a number:");
  read(number);
  count := 0;
  while number <> 0 do
  begin
    if flag  then
    begin
      count:=count+1;
      flag := 1;
    end
    else 
    begin
     count :=count;
    end; 
    number := number / 10;
  end;
  write("The number of digits is: ");
  write(count);
end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 9 ::> number -> Variable not set

Line: 11 ::> flag -> Variable not set

Line: 14 ::> flag -> Invalid data type for assignment

Line: 11 ::> Invalid data type for conditional statement

Line: 20 ::> number -> Variable not set

Line: 20 ::> number -> Invalid data type for assignment


Parsing completed successfully
========
Symbol Table:
========
ID Name: count, Data Type: int, Value: 0
ID Name: number, Data Type: int, Value: 0
ID Name: flag, Data Type: boolean, Value: 0
=======================================
Test Case 14
program NumberOfDigits;
var
  number, count: Integer;
begin
  write("Enter a number:");
  read(number);
  count := 0;
  while number <> 0 do
  begin
    if number <> 0 then
    begin
      count:=count+1;
    end
    else 
    begin
     count :=count;
    end; 
    number := number / 10;
  end;
  write("The number of digits is: ");
  write(count);
end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 8 ::> number -> Variable not set

Line: 10 ::> number -> Variable not set

Line: 10 ::> Invalid data type for conditional statement

Line: 18 ::> number -> Variable not set

Line: 18 ::> number -> Invalid data type for assignment


Parsing completed successfully
========
Symbol Table:
========
ID Name: count, Data Type: int, Value: 0
ID Name: number, Data Type: int, Value: 0
=======================================
Test Case 15
program MaxValueArray;
var
  numbers: array[1..10] of Integer;
  i, j, maxValue: Integer;
begin
  write("Enter 10 integer values:");
  for i := 1 to 10 do
  begin
    read(numbers[i]);
  end;
  j := 1; 
  maxValue := numbers[1];
  for i := j+2 to j+5 do
  begin
    if numbers[i] <> maxValue then
    begin
      maxValue := numbers[i];
    end;
  end;
 
  write("The value is ");  
  write(maxValue);
end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 9 ::> i -> Variable must be integer and must be set before it's accessed

Line: 12 ::> numbers[1] -> Array index not set

Line: 15 ::> i -> Variable must be integer and must be set before it's accessed

Line: 15 ::> numbers[5] -> Array index not set

Line: 17 ::> i -> Variable must be integer and must be set before it's accessed

Line: 17 ::> numbers[5] -> Array index not set

Line: 15 ::> Invalid data type for conditional statement


Parsing completed successfully
========
Symbol Table:
========
Array Name: numbers, Data Type: int, Min Index: 1, Max Index: 10
ID Name: maxValue, Data Type: int, Value: 0
ID Name: j, Data Type: int, Value: 0
ID Name: i, Data Type: int, Value: 0
=======================================
Test Case 16
program ArrayAverage;
var
  grade : char ;
  isready : boolean ;
  numbers : array [1..10] of Integer ;
  number, i, sum : Integer;
  maxValue : real;
  // the programs starts here
begin
  write("Enter a number:");
  read(number);
  while number <> 0 do
  begin
    if number > 0 then
    begin
      count:=count+1;
    end
    else
    begin
     count :=count;
    end;
    number := number - (number / 10) * 10;
    number := number %  10;
  end;
  for i := 2 to 10 do
  begin
    if numbers[i] <= maxValue then
    begin
      maxValue := numbers[i] + 10;
    end;
  end;
  average := sum / 5;
  write(sum, maxValue);
  // the program ends here
end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc
 the programs starts here

Line: 11 ::> number -> Variable not set

Line: 13 ::> number -> Variable not set

Line: 15 ::> count -> Variable not declared

Line: 15 ::> count -> Variable not declared

Line: 19 ::> count -> Variable not declared

Line: 19 ::> count -> Variable not declared

Line: 13 ::> Invalid data type for conditional statement

Line: 21 ::> number -> Variable not set

Line: 21 ::> number -> Variable not set

Line: 21 ::> number -> Invalid data type for assignment

Line: 26 ::> i -> Variable must be integer and must be set before it's accessed

Line: 26 ::> numbers[10] -> Array index not set

Line: 26 ::> maxValue -> Variable not set

Line: 28 ::> i -> Variable must be integer and must be set before it's accessed

Line: 28 ::> numbers[10] -> Array index not set

Line: 28 ::> maxValue -> Invalid data type for assignment

Line: 26 ::> Invalid data type for conditional statement

Line: 31 ::> sum -> Variable not set

Line: 31 ::> average -> Variable not declared the program ends here


Parsing completed successfully
========
Symbol Table:
========
ID Name: grade, Data Type: char, Value: 0
ID Name: isready, Data Type: boolean, Value: 0
Array Name: numbers, Data Type: int, Min Index: 1, Max Index: 10
ID Name: sum, Data Type: int, Value: 0
ID Name: i, Data Type: int, Value: 0
ID Name: number, Data Type: int, Value: 0
ID Name: maxValue, Data Type: real, Value: 0
