
=======================================
Test Case 1
program ArrayAverage;
var
  numbers: array[1..5] of Integer;
  i, a, b, d, sum, digit, number, count : Integer;
  average : real;
  x: boolean;
  c: char;
begin
  i := 100;
  i := i + i * (i - i) + (i - i) * d;
  x := (7 < 5) and (6 > 5);
  a := -3;
  count := 0;
  number := 0;
  digit := 0.0;

  numBers[3] := 4;

  write("Enter 5 integer values:");

  c := 'c';
  write(c);

  for i := 1 to 5 do
  begin
    read(numbers[i]);
  end;

  for i := 1 to 5 do
  begin
    write(numbers[i]);
  end;

  sum := 0;
  for i := 1 to 5 do
  begin
    sum := sum + 6 * 7 + numbers[i];
  end;

  if x then
  begin
    a := numbers[i] + 9;
    write("x is true");
  end
  else
  begin
    write("x is false");
    a := numbers[i] - 9;
  end;


  while number <> 0 do
  begin
    digit := number - (number / 10) * 10;
    
    if digit <> 0 then
    begin
      count:=count+1;
    end;

    number := number / 10;
  end;

  average := sum / 5;
  write("The sum and average are: "); 
  write(sum, average);
end.Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 10 ::> d -> Variable not set

Line: 15 ::> digit -> Invalid data type for assignment
========
Symbol Table:
========
    ID Name    | Data Type |   Value   

        numbers|       int|         0
          count|        int|          0
         number|        int|          0
          digit|        int|          0
            sum|        int|          0
              d|        int|          0
              b|        int|          0
              a|        int|          0
              i|        int|          0
        average|       real|          0
              x|    boolean|          0
              c|       char|          0
========
Symbol Table:
========
    ID Name    | Data Type |   Value   

        numbers|       int|         0
          count|        int|          0
         number|        int|          0
          digit|        int|          0
            sum|        int|          0
              d|        int|          0
              b|        int|          0
              a|        int|          0
              i|        int|          1
        average|       real|          0
              x|    boolean|          0
              c|       char|          0
========
Symbol Table:
========
    ID Name    | Data Type |   Value   

        numbers|       int|         0
          count|        int|          0
         number|        int|          0
          digit|        int|          0
            sum|        int|          0
              d|        int|          0
              b|        int|          0
              a|        int|          0
              i|        int|          1
        average|       real|          0
              x|    boolean|          0
              c|       char|          0

Line: 48 ::> i -> Variable must be integer and must be set before it's accessed

Line: 48 ::> numbers[9] -> Array index out of bounds

Line: 54 ::> digit -> Invalid data type for assignment

Line: 61 ::> number -> Invalid data type for assignment


Parsing completed successfully


[Root[ProgramDeclaration[PROGRAM][IDENTIFIER][SEMICOLON]][VariableDeclaration[VAR][DeclarationLists[DeclarationList[ArrayDeclaration[IDENTIFIER][COLON][ARRAY][Leftbracket][INT_NUMBER][DOTDOT][INT_NUMBER][Rightbracket][OF][Datatype[Integer]][SEMICOLON]]][DeclarationLists[DeclarationList[MultipleVariable[IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER]]]]]]]][COLON][Datatype[Integer]][SEMICOLON]]][DeclarationLists[DeclarationList[SingleVariable[IDENTIFIER][COLON][Datatype[Real]][SEMICOLON]]][DeclarationLists[DeclarationList[SingleVariable[IDENTIFIER][COLON][Datatype[Boolean]][SEMICOLON]]][DeclarationLists[DeclarationList[SingleVariable[IDENTIFIER][COLON][Datatype[Char]][SEMICOLON]]]]]]]]][BodyOfProgram[BEGIN][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[INT_NUMBER]]]][SEMICOLON]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][PLUS][ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][MULTIPLY][ExpressionSequence[LPAREN][ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][MINUS][ExpressionSequence[Term[IDENTIFIER]]]][RPAREN]]]][PLUS][ExpressionSequence[ExpressionSequence[LPAREN][ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][MINUS][ExpressionSequence[Term[IDENTIFIER]]]][RPAREN]][MULTIPLY][ExpressionSequence[Term[IDENTIFIER]]]]]][SEMICOLON]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[BooleanExpressionSequence[AnyExpression[LPAREN][ExpressionSequence[Term[INT_NUMBER]]][Relop[LESS]][ExpressionSequence[Term[INT_NUMBER]]][RPAREN]][AND][AnyExpression[LPAREN][ExpressionSequence[Term[INT_NUMBER]]][Relop[GREATER]][ExpressionSequence[Term[INT_NUMBER]]][RPAREN]]]][SEMICOLON]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[MINUS][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[INT_NUMBER]]]][SEMICOLON]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[INT_NUMBER]]]][SEMICOLON]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[DECIMAL_NUMBER]]]][SEMICOLON]]][Statements[Statement[AssignmentStatement[IDENTIFIER][ArrayAddOn[BetweenBrackets[INT_NUMBER]][Rightbracket]][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[INT_NUMBER]]]][SEMICOLON]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][CHARACTER][SEMICOLON]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]]][RPAREN][SEMICOLON]]][Statements[Statement[LoopingStatement[ForLoop[FOR][IDENTIFIER][COLON][EQUAL][ExpressionSequence[Term[INT_NUMBER]]][ForLoopTo[TO][ExpressionSequence[Term[INT_NUMBER]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[ReadStatement[READ][LPAREN][IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]]]][Statements[Statement[LoopingStatement[ForLoop[FOR][IDENTIFIER][COLON][EQUAL][ExpressionSequence[Term[INT_NUMBER]]][ForLoopTo[TO][ExpressionSequence[Term[INT_NUMBER]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[INT_NUMBER]]]][SEMICOLON]]][Statements[Statement[LoopingStatement[ForLoop[FOR][IDENTIFIER][COLON][EQUAL][ExpressionSequence[Term[INT_NUMBER]]][ForLoopTo[TO][ExpressionSequence[Term[INT_NUMBER]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][PLUS][ExpressionSequence[ExpressionSequence[Term[INT_NUMBER]]][MULTIPLY][ExpressionSequence[Term[INT_NUMBER]]]]][PLUS][ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]]]][SEMICOLON]]]][END]][SEMICOLON]]]]][Statements[Statement[ConditionalStatement[IF][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]][PLUS][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]]][END]][ELSE][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]][MINUS][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]]]][END]][SEMICOLON]]][Statements[Statement[LoopingStatement[WhileLoop[WHILE][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]][Relop[NOTEQUALS]][ExpressionSequence[Term[INT_NUMBER]]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][MINUS][ExpressionSequence[ExpressionSequence[LPAREN][ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][DIVIDE][ExpressionSequence[Term[INT_NUMBER]]]][RPAREN]][MULTIPLY][ExpressionSequence[Term[INT_NUMBER]]]]]][SEMICOLON]]][StatementsInsideLoop[StatementInsideLoop[ConditionalStatement[IF][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]][Relop[NOTEQUALS]][ExpressionSequence[Term[INT_NUMBER]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][PLUS][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]]][END]][SEMICOLON]]][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][DIVIDE][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]]]]][END]][SEMICOLON]]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][DIVIDE][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]][COMMA][WriteIdentifierList[WriteIdentifier[IDENTIFIER]]]][RPAREN][SEMICOLON]]]]]]]]]]]]]]]]]]]]]]][END][DOT]]]
=======================================
Test Case 2
program MaxValueArray;
var
  numbers: array[1..10] of Integer;
  i, maxValue: Integer;
  number:integer;
  i:char;
begin
  write("Enter 10 integer values:",i);
  maxValue := numbers[12];
  for i := 1 to 10 do
  begin
    read(numbers[i]);
    write(numbers[i]);
  end;
  maxValue := numbers[1];
  for i := 2 to 10 do
  begin
    if numbers[i] > maxValue then
    begin
      maxValue := numbers[i];
    end;
  end;
  write("The maximum value is: ");  
  write(maxValue);
  while number <> 0 do
  begin
    if number <> 0 then
    begin
      count:=count+1;
    end
    else 
    begin
     count :=count;
    end; 
    number := number / 10;
  end;
end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Variable < i > already declared

Line: 8 ::> i -> Variable not set

Line: 9 ::> numbers[12] -> Array index out of bounds
========
Symbol Table:
========
    ID Name    | Data Type |   Value   

        numbers|       int|         0
       maxvalue|        int|          0
              i|        int|          0
         number|        int|          0
              i|       char|          0
========
Symbol Table:
========
    ID Name    | Data Type |   Value   

        numbers|       int|         0
       maxvalue|        int|          0
              i|        int|          1
         number|        int|          0
              i|       char|          0

Line: 18 ::> numbers[2] -> Array index not set

Line: 20 ::> numbers[2] -> Array index not set

Line: 25 ::> number -> Variable not set

Line: 27 ::> number -> Variable not set

Line: 29 ::> count -> Variable not declared

Line: 29 ::> count -> Variable not declared

Line: 33 ::> count -> Variable not declared

Line: 33 ::> count -> Variable not declared

Line: 35 ::> number -> Variable not set

Line: 35 ::> number -> Invalid data type for assignment


Parsing completed successfully


[Root[ProgramDeclaration[PROGRAM][IDENTIFIER][SEMICOLON]][VariableDeclaration[VAR][DeclarationLists[DeclarationList[ArrayDeclaration[IDENTIFIER][COLON][ARRAY][Leftbracket][INT_NUMBER][DOTDOT][INT_NUMBER][Rightbracket][OF][Datatype[Integer]][SEMICOLON]]][DeclarationLists[DeclarationList[MultipleVariable[IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER]][COLON][Datatype[Integer]][SEMICOLON]]][DeclarationLists[DeclarationList[SingleVariable[IDENTIFIER][COLON][Datatype[Integer]][SEMICOLON]]][DeclarationLists[DeclarationList[SingleVariable[IDENTIFIER][COLON][Datatype[Char]][SEMICOLON]]]]]]]][BodyOfProgram[BEGIN][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]][COMMA][WriteIdentifierList[WriteIdentifier[IDENTIFIER]]]][RPAREN][SEMICOLON]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[INT_NUMBER]][Rightbracket]]]]][SEMICOLON]]][Statements[Statement[LoopingStatement[ForLoop[FOR][IDENTIFIER][COLON][EQUAL][ExpressionSequence[Term[INT_NUMBER]]][ForLoopTo[TO][ExpressionSequence[Term[INT_NUMBER]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[ReadStatement[READ][LPAREN][IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]][RPAREN][SEMICOLON]]][StatementsInsideLoop[StatementInsideLoop[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]][RPAREN][SEMICOLON]]]]][END]][SEMICOLON]]]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[INT_NUMBER]][Rightbracket]]]]][SEMICOLON]]][Statements[Statement[LoopingStatement[ForLoop[FOR][IDENTIFIER][COLON][EQUAL][ExpressionSequence[Term[INT_NUMBER]]][ForLoopTo[TO][ExpressionSequence[Term[INT_NUMBER]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[ConditionalStatement[IF][AnyExpression[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]][Relop[GREATER]][ExpressionSequence[Term[IDENTIFIER]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]]][SEMICOLON]]]][END]][SEMICOLON]]]][END]][SEMICOLON]]]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]]][RPAREN][SEMICOLON]]][Statements[Statement[LoopingStatement[WhileLoop[WHILE][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]][Relop[NOTEQUALS]][ExpressionSequence[Term[INT_NUMBER]]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[ConditionalStatement[IF][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]][Relop[NOTEQUALS]][ExpressionSequence[Term[INT_NUMBER]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][PLUS][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]]][END]][ELSE][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]]][SEMICOLON]]]][END]][SEMICOLON]]][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][DIVIDE][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]]]][END]][SEMICOLON]]]]]]]]]]]][END][DOT]]]
=======================================
Test Case 3
program ReverseNumber;
var
  number, reversedNumber, remainder: Integer;
begin
  write("Enter a number to reverse:", 3, number);
  read(number);
  reversedNumber := 0;
  while number <> 0 do
  begin
    remainder := number % 10;
    reversedNumber := reversedNumber * 10 + remainder;
    number := number / 10;
  end;
  write("The reversed number is: ");
  write(reversedNumber);
end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 5 ::> number -> Variable not set

Line: 12 ::> number -> Invalid data type for assignment


Parsing completed successfully


[Root[ProgramDeclaration[PROGRAM][IDENTIFIER][SEMICOLON]][VariableDeclaration[VAR][DeclarationLists[DeclarationList[MultipleVariable[IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER]]][COLON][Datatype[Integer]][SEMICOLON]]]]][BodyOfProgram[BEGIN][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]][COMMA][WriteIdentifierList[WriteIdentifier[INT_NUMBER]][COMMA][WriteIdentifierList[WriteIdentifier[IDENTIFIER]]]]][RPAREN][SEMICOLON]]][Statements[Statement[ReadStatement[READ][LPAREN][IDENTIFIER][RPAREN][SEMICOLON]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[INT_NUMBER]]]][SEMICOLON]]][Statements[Statement[LoopingStatement[WhileLoop[WHILE][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]][Relop[NOTEQUALS]][ExpressionSequence[Term[INT_NUMBER]]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][MOD][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][MULTIPLY][ExpressionSequence[Term[INT_NUMBER]]]][PLUS][ExpressionSequence[Term[IDENTIFIER]]]]][SEMICOLON]]][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][DIVIDE][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]]]]][END]][SEMICOLON]]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]]][RPAREN][SEMICOLON]]]]]]]]][END][DOT]]]
=======================================
Test Case 4
program NumberOfDigits;
var
  number, count, digit: Integer;
begin
  write("Enter a number:");
  read(number);
  count := 0;
  while number <> 0 do
  begin
    digit := number - (number / 10) * 10;
    
    if digit <> 0 then
      begin
      count:=count+1;
      end;
    number := number / 10;
  end;
  write("The number of digits is: ");
  write(count);
end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 10 ::> digit -> Invalid data type for assignment

Line: 16 ::> number -> Invalid data type for assignment


Parsing completed successfully


[Root[ProgramDeclaration[PROGRAM][IDENTIFIER][SEMICOLON]][VariableDeclaration[VAR][DeclarationLists[DeclarationList[MultipleVariable[IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER]]][COLON][Datatype[Integer]][SEMICOLON]]]]][BodyOfProgram[BEGIN][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]][Statements[Statement[ReadStatement[READ][LPAREN][IDENTIFIER][RPAREN][SEMICOLON]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[INT_NUMBER]]]][SEMICOLON]]][Statements[Statement[LoopingStatement[WhileLoop[WHILE][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]][Relop[NOTEQUALS]][ExpressionSequence[Term[INT_NUMBER]]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][MINUS][ExpressionSequence[ExpressionSequence[LPAREN][ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][DIVIDE][ExpressionSequence[Term[INT_NUMBER]]]][RPAREN]][MULTIPLY][ExpressionSequence[Term[INT_NUMBER]]]]]][SEMICOLON]]][StatementsInsideLoop[StatementInsideLoop[ConditionalStatement[IF][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]][Relop[NOTEQUALS]][ExpressionSequence[Term[INT_NUMBER]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][PLUS][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]]][END]][SEMICOLON]]][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][DIVIDE][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]]]]][END]][SEMICOLON]]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]]][RPAREN][SEMICOLON]]]]]]]]][END][DOT]]]
=======================================
Test Case 5
program NumberOfDigits;
var
  number, count: Integer;
begin
  write("Enter a number:");
  read(number);
  count := 0;
  while number <> 0 do
  begin
    number := number / 10;
    count := count + 1;
  end;
  write("The number of digits is: ");
  write(count);
end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 10 ::> number -> Invalid data type for assignment


Parsing completed successfully


[Root[ProgramDeclaration[PROGRAM][IDENTIFIER][SEMICOLON]][VariableDeclaration[VAR][DeclarationLists[DeclarationList[MultipleVariable[IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER]][COLON][Datatype[Integer]][SEMICOLON]]]]][BodyOfProgram[BEGIN][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]][Statements[Statement[ReadStatement[READ][LPAREN][IDENTIFIER][RPAREN][SEMICOLON]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[INT_NUMBER]]]][SEMICOLON]]][Statements[Statement[LoopingStatement[WhileLoop[WHILE][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]][Relop[NOTEQUALS]][ExpressionSequence[Term[INT_NUMBER]]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][DIVIDE][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][PLUS][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]]]][END]][SEMICOLON]]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]]][RPAREN][SEMICOLON]]]]]]]]][END][DOT]]]
=======================================
Test Case 6
program FactorialCalculation;
var
  number, factorial, i: Integer;
begin
  write("Enter a number to calculate its factorial:");
  read(number);
  factorial := 1;
  for i := number downto 1 do
  begin
    factorial := factorial * i;
  end;
  write("The factorial is: ");
  write(factorial);
end.


Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc

========
Symbol Table:
========
    ID Name    | Data Type |   Value   

              i|        int|          0
      factorial|        int|          0
         number|        int|          0


Parsing completed successfully


[Root[ProgramDeclaration[PROGRAM][IDENTIFIER][SEMICOLON]][VariableDeclaration[VAR][DeclarationLists[DeclarationList[MultipleVariable[IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER]]][COLON][Datatype[Integer]][SEMICOLON]]]]][BodyOfProgram[BEGIN][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]][Statements[Statement[ReadStatement[READ][LPAREN][IDENTIFIER][RPAREN][SEMICOLON]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[INT_NUMBER]]]][SEMICOLON]]][Statements[Statement[LoopingStatement[ForLoop[FOR][IDENTIFIER][COLON][EQUAL][ExpressionSequence[Term[IDENTIFIER]]][ForLoopDownTo[DOWNTO][ExpressionSequence[Term[INT_NUMBER]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][MULTIPLY][ExpressionSequence[Term[IDENTIFIER]]]]][SEMICOLON]]]][END]][SEMICOLON]]]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]]][RPAREN][SEMICOLON]]]]]]]]][END][DOT]]]
=======================================
Test Case 7
program SumOfSquares;
var
  number, sum, i: Integer;
begin
  write("Enter a number to calculate the sum of squares up to that number:");
  read(number);
  sum := 0;
  for i := 1 to number do
  begin
    sum := sum + (i * i);
  end;
  write("The sum of squares up is");
  write(sum);
end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc

========
Symbol Table:
========
    ID Name    | Data Type |   Value   

              i|        int|          0
            sum|        int|          0
         number|        int|          0


Parsing completed successfully


[Root[ProgramDeclaration[PROGRAM][IDENTIFIER][SEMICOLON]][VariableDeclaration[VAR][DeclarationLists[DeclarationList[MultipleVariable[IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER]]][COLON][Datatype[Integer]][SEMICOLON]]]]][BodyOfProgram[BEGIN][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]][Statements[Statement[ReadStatement[READ][LPAREN][IDENTIFIER][RPAREN][SEMICOLON]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[INT_NUMBER]]]][SEMICOLON]]][Statements[Statement[LoopingStatement[ForLoop[FOR][IDENTIFIER][COLON][EQUAL][ExpressionSequence[Term[INT_NUMBER]]][ForLoopTo[TO][ExpressionSequence[Term[IDENTIFIER]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][PLUS][ExpressionSequence[LPAREN][ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][MULTIPLY][ExpressionSequence[Term[IDENTIFIER]]]][RPAREN]]]][SEMICOLON]]]][END]][SEMICOLON]]]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]]][RPAREN][SEMICOLON]]]]]]]]][END][DOT]]]
=======================================
Test Case 8
program forif;
var
  i, j: Integer;
begin
  for i := 1 to 20 do
   begin
     if i % 3 = 0 then 
      begin
        j := i + 2; 
        write(j);
      end;
    end;

end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc

========
Symbol Table:
========
    ID Name    | Data Type |   Value   

              j|        int|          0
              i|        int|          0


Parsing completed successfully


[Root[ProgramDeclaration[PROGRAM][IDENTIFIER][SEMICOLON]][VariableDeclaration[VAR][DeclarationLists[DeclarationList[MultipleVariable[IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER]][COLON][Datatype[Integer]][SEMICOLON]]]]][BodyOfProgram[BEGIN][Statements[Statement[LoopingStatement[ForLoop[FOR][IDENTIFIER][COLON][EQUAL][ExpressionSequence[Term[INT_NUMBER]]][ForLoopTo[TO][ExpressionSequence[Term[INT_NUMBER]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[ConditionalStatement[IF][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][MOD][ExpressionSequence[Term[INT_NUMBER]]]][Relop[EQUALS]][ExpressionSequence[Term[INT_NUMBER]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][PLUS][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]]][RPAREN][SEMICOLON]]]]][END]][SEMICOLON]]]][END]][SEMICOLON]]]]]][END][DOT]]]
=======================================
Test Case 9
program Example9;
var
  i: Integer;
begin
  i := 10;
  if i > 10 then
  begin
    i := 10;
    i := i - 1;
    write(i);
  end
  else
  begin
    i := 20;
    write(i);
  end;
end.Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc



Parsing completed successfully


[Root[ProgramDeclaration[PROGRAM][IDENTIFIER][SEMICOLON]][VariableDeclaration[VAR][DeclarationLists[DeclarationList[SingleVariable[IDENTIFIER][COLON][Datatype[Integer]][SEMICOLON]]]]][BodyOfProgram[BEGIN][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[INT_NUMBER]]]][SEMICOLON]]][Statements[Statement[ConditionalStatement[IF][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]][Relop[GREATER]][ExpressionSequence[Term[INT_NUMBER]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[INT_NUMBER]]]][SEMICOLON]]][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][MINUS][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]]][RPAREN][SEMICOLON]]]]]][END]][ELSE][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[INT_NUMBER]]]][SEMICOLON]]][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]]][RPAREN][SEMICOLON]]]]][END]][SEMICOLON]]]]][END][DOT]]]
=======================================
Test Case 10
program forif;
var
  i, j, a, b, x: Integer;
  arr: array[1..20] of Integer;
begin
  x := 1;
  for i := 1 to 20 do
  begin
    if i % 3 = 0 then 
    begin
      j := i + 2; 
      write(j);
      arr[1] := i;
      arr[x] := i;
      arr[1] := i;

      write(a, " ", b, " ", arr[i]);
    end;
  end;

  if i % 3 = 0 then
  begin
    for i := 3 downto 0 do
    begin
      write(i, " ", 5);
    end;
  end
  else
  begin
    for i := 3 downto 0 do
    begin
      write(i, " ", 5);
    end;
  end;
end.Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc

========
Symbol Table:
========
    ID Name    | Data Type |   Value   

              x|        int|          0
              b|        int|          0
              a|        int|          0
              j|        int|          0
              i|        int|          0
            arr|       int|         0

Line: 14 ::> arr[0] -> Array index out of bounds

Line: 17 ::> a -> Variable not set

Line: 17 ::> b -> Variable not set

Line: 17 ::> i -> Variable must be integer and must be set before it's accessed
========
Symbol Table:
========
    ID Name    | Data Type |   Value   

              x|        int|          0
              b|        int|          0
              a|        int|          0
              j|        int|          0
              i|        int|          1
            arr|       int|         0
========
Symbol Table:
========
    ID Name    | Data Type |   Value   

              x|        int|          0
              b|        int|          0
              a|        int|          0
              j|        int|          0
              i|        int|          3
            arr|       int|         0


Parsing completed successfully


[Root[ProgramDeclaration[PROGRAM][IDENTIFIER][SEMICOLON]][VariableDeclaration[VAR][DeclarationLists[DeclarationList[MultipleVariable[IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER]]]]][COLON][Datatype[Integer]][SEMICOLON]]][DeclarationLists[DeclarationList[ArrayDeclaration[IDENTIFIER][COLON][ARRAY][Leftbracket][INT_NUMBER][DOTDOT][INT_NUMBER][Rightbracket][OF][Datatype[Integer]][SEMICOLON]]]]]][BodyOfProgram[BEGIN][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[INT_NUMBER]]]][SEMICOLON]]][Statements[Statement[LoopingStatement[ForLoop[FOR][IDENTIFIER][COLON][EQUAL][ExpressionSequence[Term[INT_NUMBER]]][ForLoopTo[TO][ExpressionSequence[Term[INT_NUMBER]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[ConditionalStatement[IF][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][MOD][ExpressionSequence[Term[INT_NUMBER]]]][Relop[EQUALS]][ExpressionSequence[Term[INT_NUMBER]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][PLUS][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]]][RPAREN][SEMICOLON]]][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][ArrayAddOn[BetweenBrackets[INT_NUMBER]][Rightbracket]][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]]][SEMICOLON]]][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]]][SEMICOLON]]][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][ArrayAddOn[BetweenBrackets[INT_NUMBER]][Rightbracket]][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]]][SEMICOLON]]][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]][COMMA][WriteIdentifierList[WriteIdentifier[STRING]][COMMA][WriteIdentifierList[WriteIdentifier[IDENTIFIER]][COMMA][WriteIdentifierList[WriteIdentifier[STRING]][COMMA][WriteIdentifierList[WriteIdentifier[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]]]]]][RPAREN][SEMICOLON]]]]]]]]][END]][SEMICOLON]]]][END]][SEMICOLON]]]]][Statements[Statement[ConditionalStatement[IF][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][MOD][ExpressionSequence[Term[INT_NUMBER]]]][Relop[EQUALS]][ExpressionSequence[Term[INT_NUMBER]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[LoopingStatement[ForLoop[FOR][IDENTIFIER][COLON][EQUAL][ExpressionSequence[Term[INT_NUMBER]]][ForLoopDownTo[DOWNTO][ExpressionSequence[Term[INT_NUMBER]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]][COMMA][WriteIdentifierList[WriteIdentifier[STRING]][COMMA][WriteIdentifierList[WriteIdentifier[INT_NUMBER]]]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]]]]][END]][ELSE][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[LoopingStatement[ForLoop[FOR][IDENTIFIER][COLON][EQUAL][ExpressionSequence[Term[INT_NUMBER]]][ForLoopDownTo[DOWNTO][ExpressionSequence[Term[INT_NUMBER]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]][COMMA][WriteIdentifierList[WriteIdentifier[STRING]][COMMA][WriteIdentifierList[WriteIdentifier[INT_NUMBER]]]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]]]]][END]][SEMICOLON]]]]]][END][DOT]]]
=======================================
Test Case 11
Program OneHundredDoors;
var
   doors : Array[1..100] of Boolean;
   arr: array[1..100] of Integer;
   i, j	 : Integer;
begin
   for i := 1 to 100 do begin
      j := i;
	   j := j + i;
      j:= 'c';
   end;

   a := 1+---3;

   for i := 1 to 100 do begin
      write(i, " ",'c');
   end;

   if a then begin
	   write("only identifier without brackets");
   end;

   if (a) then begin
	   write("only identifier with brackets");
   end;

   if (1 * 7 = 8) then begin
	   write("only identifier with brackets");
   end;

   if arr[i] then begin
	   write("only array without brackets");
   end;

   if ((arr[i] - 3) = 4) then begin
	   write("only array without brackets");
   end;

   if (arr[i]) then begin
	   write("only array without brackets");
   end;

   writeln(a, 3, arr[3], "ada", 'a');

   if arr[i] and a then begin
	   write("array with boolean 1");
   end;

   if not doors[i] or not doors[i] then begin
	   write("array with boolean 2");
   end;

   while i < 3 do begin
      write("hello");
   end;

   while (i < 3) do begin
      write("hello");
   end;

   if (a + v + x - d = 1) and a = 1 then begin
	   write("expression");
   end;

   if (a +( v + x) - d = 1) and a = 1 then begin
	   write("expression");
   end;


   if (a + v + (x) - d) then begin
	   write("expression");
   end;

   if (not doors[i]) or (not doors[i]) then begin
	   write("array with boolean and bracket");
   end;

   if id and id > 2 then begin
	   write("array with boolean and bracket");
   end;

   if ((not doors[i]) or (not doors[i])) then begin
	   write("array with boolean and bracket");
   end;

   if (not doors[i]) or (not doors[i]) and not x then begin
	   write("array with boolean and bracket");
   end;

   if (not doors[i] or not doors[i]) then begin
	   write("array with boolean and bracket");
   end;
   write("inside single quore");

end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc

========
Symbol Table:
========
    ID Name    | Data Type |   Value   

          doors|   boolean|         0
            arr|       int|         0
              j|        int|          0
              i|        int|          0

Line: 10 ::> j -> Invalid data type for assignment

Line: 13 ::> a -> Variable not declared
========
Symbol Table:
========
    ID Name    | Data Type |   Value   

          doors|   boolean|         0
            arr|       int|         0
              j|        int|          0
              i|        int|          1

Line: 16 ::> Invalid data type for character

Line: 19 ::> a -> Variable not declared

Line: 19 ::> Invalid data type for if condition

Line: 23 ::> a -> Variable not declared

Line: 23 ::> Invalid data type for if condition

Line: 31 ::> i -> Variable must be integer and must be set before it's accessed

Line: 31 ::> arr[8] -> Array index not set

Line: 31 ::> Invalid data type for if condition

Line: 35 ::> i -> Variable must be integer and must be set before it's accessed

Line: 35 ::> arr[8] -> Array index not set

Line: 39 ::> i -> Variable must be integer and must be set before it's accessed

Line: 39 ::> arr[4] -> Array index not set

Line: 39 ::> Invalid data type for if condition

Line: 43 ::> a -> Variable not declared

Line: 43 ::> arr[3] -> Array index not set

Line: 43 ::> Invalid data type for character

Line: 45 ::> i -> Variable must be integer and must be set before it's accessed

Line: 45 ::> arr[a] -> Array index out of bounds

Line: 45 ::> a -> Variable not declared

Line: 45 ::> Invalid data type for boolean expressions

Line: 49 ::> i -> Variable must be integer and must be set before it's accessed

Line: 49 ::> doors[a] -> Array index out of bounds

Line: 49 ::> i -> Variable must be integer and must be set before it's accessed

Line: 49 ::> doors[a] -> Array index out of bounds

Line: 61 ::> a -> Variable not declared

Line: 61 ::> v -> Variable not declared

Line: 61 ::> Invalid data type for addition

Line: 61 ::> x -> Variable not declared

Line: 61 ::> Invalid data type for addition

Line: 61 ::> d -> Variable not declared

Line: 61 ::> Invalid data type for subtraction, found character

Line: 61 ::> a -> Variable not declared

Line: 65 ::> a -> Variable not declared

Line: 65 ::> v -> Variable not declared

Line: 65 ::> x -> Variable not declared

Line: 65 ::> Invalid data type for addition

Line: 65 ::> Invalid data type for addition

Line: 65 ::> d -> Variable not declared

Line: 65 ::> Invalid data type for subtraction, found character

Line: 65 ::> a -> Variable not declared

Line: 70 ::> a -> Variable not declared

Line: 70 ::> v -> Variable not declared

Line: 70 ::> Invalid data type for addition

Line: 70 ::> x -> Variable not declared

Line: 70 ::> Invalid data type for addition

Line: 70 ::> d -> Variable not declared

Line: 70 ::> Invalid data type for subtraction, found character

Line: 70 ::> Invalid data type for if condition

Line: 74 ::> i -> Variable must be integer and must be set before it's accessed

Line: 74 ::> doors[1] -> Array index not set

Line: 74 ::> i -> Variable must be integer and must be set before it's accessed

Line: 74 ::> doors[1] -> Array index not set

Line: 78 ::> id -> Variable not declared

Line: 78 ::> id -> Variable not declared

Line: 78 ::> Invalid data type for relational expressions
string int

Line: 78 ::> Invalid data type for boolean expressions

Line: 82 ::> i -> Variable must be integer and must be set before it's accessed

Line: 82 ::> doors[2] -> Array index not set

Line: 82 ::> i -> Variable must be integer and must be set before it's accessed

Line: 82 ::> doors[2] -> Array index not set

Line: 86 ::> i -> Variable must be integer and must be set before it's accessed

Line: 86 ::> doors[2] -> Array index not set

Line: 86 ::> i -> Variable must be integer and must be set before it's accessed

Line: 86 ::> doors[2] -> Array index not set

Line: 86 ::> x -> Variable not declared

Line: 86 ::> Invalid data type for boolean expressions

Line: 90 ::> i -> Variable must be integer and must be set before it's accessed

Line: 90 ::> doors[2] -> Array index not set

Line: 90 ::> i -> Variable must be integer and must be set before it's accessed

Line: 90 ::> doors[2] -> Array index not set


Parsing completed successfully


[Root[ProgramDeclaration[PROGRAM][IDENTIFIER][SEMICOLON]][VariableDeclaration[VAR][DeclarationLists[DeclarationList[ArrayDeclaration[IDENTIFIER][COLON][ARRAY][Leftbracket][INT_NUMBER][DOTDOT][INT_NUMBER][Rightbracket][OF][Datatype[Boolean]][SEMICOLON]]][DeclarationLists[DeclarationList[ArrayDeclaration[IDENTIFIER][COLON][ARRAY][Leftbracket][INT_NUMBER][DOTDOT][INT_NUMBER][Rightbracket][OF][Datatype[Integer]][SEMICOLON]]][DeclarationLists[DeclarationList[MultipleVariable[IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER]][COLON][Datatype[Integer]][SEMICOLON]]]]]]][BodyOfProgram[BEGIN][Statements[Statement[LoopingStatement[ForLoop[FOR][IDENTIFIER][COLON][EQUAL][ExpressionSequence[Term[INT_NUMBER]]][ForLoopTo[TO][ExpressionSequence[Term[INT_NUMBER]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]]][SEMICOLON]]][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][PLUS][ExpressionSequence[Term[IDENTIFIER]]]]][SEMICOLON]]][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][CHARACTER][SEMICOLON]]]]]][END]][SEMICOLON]]]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[INT_NUMBER]]][PLUS][ExpressionSequence[MINUS][ExpressionSequence[MINUS][ExpressionSequence[MINUS][ExpressionSequence[Term[INT_NUMBER]]]]]]]][SEMICOLON]]][Statements[Statement[LoopingStatement[ForLoop[FOR][IDENTIFIER][COLON][EQUAL][ExpressionSequence[Term[INT_NUMBER]]][ForLoopTo[TO][ExpressionSequence[Term[INT_NUMBER]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]][COMMA][WriteIdentifierList[WriteIdentifier[STRING]][COMMA][WriteIdentifierList[WriteIdentifier[CHARACTER]]]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]]]][Statements[Statement[ConditionalStatement[IF][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]][Statements[Statement[ConditionalStatement[IF][AnyExpression[ExpressionSequence[LPAREN][ExpressionSequence[Term[IDENTIFIER]]][RPAREN]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]][Statements[Statement[ConditionalStatement[IF][AnyExpression[LPAREN][ExpressionSequence[ExpressionSequence[Term[INT_NUMBER]]][MULTIPLY][ExpressionSequence[Term[INT_NUMBER]]]][Relop[EQUALS]][ExpressionSequence[Term[INT_NUMBER]]][RPAREN]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]][Statements[Statement[ConditionalStatement[IF][AnyExpression[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]][Statements[Statement[ConditionalStatement[IF][AnyExpression[LPAREN][ExpressionSequence[LPAREN][ExpressionSequence[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]][MINUS][ExpressionSequence[Term[INT_NUMBER]]]][RPAREN]][Relop[EQUALS]][ExpressionSequence[Term[INT_NUMBER]]][RPAREN]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]][Statements[Statement[ConditionalStatement[IF][AnyExpression[ExpressionSequence[LPAREN][ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]][RPAREN]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]][Statements[Statement[WriteStatement[WRITE_LN][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]][COMMA][WriteIdentifierList[WriteIdentifier[INT_NUMBER]][COMMA][WriteIdentifierList[WriteIdentifier[IDENTIFIER][ArrayAddOn[BetweenBrackets[INT_NUMBER]][Rightbracket]]][COMMA][WriteIdentifierList[WriteIdentifier[STRING]][COMMA][WriteIdentifierList[WriteIdentifier[CHARACTER]]]]]]][RPAREN][SEMICOLON]]][Statements[Statement[ConditionalStatement[IF][AnyExpression[BooleanExpressionSequence[AnyExpression[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]]][AND][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]][Statements[Statement[ConditionalStatement[IF][AnyExpression[BooleanExpressionSequence[AnyExpression[BooleanExpressionSequence[NOT][AnyExpression[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]]]]][OR][AnyExpression[BooleanExpressionSequence[NOT][AnyExpression[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]]]]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]][Statements[Statement[LoopingStatement[WhileLoop[WHILE][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]][Relop[LESS]][ExpressionSequence[Term[INT_NUMBER]]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]]][Statements[Statement[LoopingStatement[WhileLoop[WHILE][AnyExpression[LPAREN][ExpressionSequence[Term[IDENTIFIER]]][Relop[LESS]][ExpressionSequence[Term[INT_NUMBER]]][RPAREN]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]]][Statements[Statement[ConditionalStatement[IF][AnyExpression[BooleanExpressionSequence[AnyExpression[LPAREN][ExpressionSequence[ExpressionSequence[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][PLUS][ExpressionSequence[Term[IDENTIFIER]]]][PLUS][ExpressionSequence[Term[IDENTIFIER]]]][MINUS][ExpressionSequence[Term[IDENTIFIER]]]][Relop[EQUALS]][ExpressionSequence[Term[INT_NUMBER]]][RPAREN]][AND][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]][Relop[EQUALS]][ExpressionSequence[Term[INT_NUMBER]]]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]][Statements[Statement[ConditionalStatement[IF][AnyExpression[BooleanExpressionSequence[AnyExpression[LPAREN][ExpressionSequence[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][PLUS][ExpressionSequence[LPAREN][ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][PLUS][ExpressionSequence[Term[IDENTIFIER]]]][RPAREN]]][MINUS][ExpressionSequence[Term[IDENTIFIER]]]][Relop[EQUALS]][ExpressionSequence[Term[INT_NUMBER]]][RPAREN]][AND][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]][Relop[EQUALS]][ExpressionSequence[Term[INT_NUMBER]]]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]][Statements[Statement[ConditionalStatement[IF][AnyExpression[ExpressionSequence[LPAREN][ExpressionSequence[ExpressionSequence[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][PLUS][ExpressionSequence[Term[IDENTIFIER]]]][PLUS][ExpressionSequence[LPAREN][ExpressionSequence[Term[IDENTIFIER]]][RPAREN]]][MINUS][ExpressionSequence[Term[IDENTIFIER]]]][RPAREN]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]][Statements[Statement[ConditionalStatement[IF][AnyExpression[BooleanExpressionSequence[AnyExpression[BooleanExpressionSequence[LPAREN][BooleanExpressionSequence[NOT][AnyExpression[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]]]][RPAREN]]][OR][AnyExpression[BooleanExpressionSequence[LPAREN][BooleanExpressionSequence[NOT][AnyExpression[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]]]][RPAREN]]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]][Statements[Statement[ConditionalStatement[IF][AnyExpression[BooleanExpressionSequence[AnyExpression[ExpressionSequence[Term[IDENTIFIER]]]][AND][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]][Relop[GREATER]][ExpressionSequence[Term[INT_NUMBER]]]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]][Statements[Statement[ConditionalStatement[IF][AnyExpression[BooleanExpressionSequence[LPAREN][BooleanExpressionSequence[AnyExpression[BooleanExpressionSequence[LPAREN][BooleanExpressionSequence[NOT][AnyExpression[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]]]][RPAREN]]][OR][AnyExpression[BooleanExpressionSequence[LPAREN][BooleanExpressionSequence[NOT][AnyExpression[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]]]][RPAREN]]]][RPAREN]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]][Statements[Statement[ConditionalStatement[IF][AnyExpression[BooleanExpressionSequence[AnyExpression[BooleanExpressionSequence[AnyExpression[BooleanExpressionSequence[LPAREN][BooleanExpressionSequence[NOT][AnyExpression[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]]]][RPAREN]]][OR][AnyExpression[BooleanExpressionSequence[LPAREN][BooleanExpressionSequence[NOT][AnyExpression[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]]]][RPAREN]]]]][AND][AnyExpression[BooleanExpressionSequence[NOT][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]]]]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]][Statements[Statement[ConditionalStatement[IF][AnyExpression[BooleanExpressionSequence[LPAREN][BooleanExpressionSequence[AnyExpression[BooleanExpressionSequence[NOT][AnyExpression[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]]]]][OR][AnyExpression[BooleanExpressionSequence[NOT][AnyExpression[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]]]]]][RPAREN]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]]]]]]]]]]]]]]]]]]]]]]]]][END][DOT]]]
=======================================
Test Case 12
program Mean;
var
  i, n, sum: integer;
  mean: real;
begin
  n := -20;
  sum := 0;

  a := (-12) + 6;
  
  for i := 1 to n do
  begin
    sum := sum + i;
  end;
  
  mean := sum / n;
  
  write("The mean of the numbers from 1 to 20 is ", mean);
end.Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Variable < mean > already declared

Line: 9 ::> a -> Variable not declared
========
Symbol Table:
========
    ID Name    | Data Type |   Value   

            sum|        int|          0
              n|        int|          0
              i|        int|          0
           mean|       real|          0


Parsing completed successfully


[Root[ProgramDeclaration[PROGRAM][IDENTIFIER][SEMICOLON]][VariableDeclaration[VAR][DeclarationLists[DeclarationList[MultipleVariable[IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER]]][COLON][Datatype[Integer]][SEMICOLON]]][DeclarationLists[DeclarationList[SingleVariable[IDENTIFIER][COLON][Datatype[Real]][SEMICOLON]]]]]][BodyOfProgram[BEGIN][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[MINUS][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[INT_NUMBER]]]][SEMICOLON]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[LPAREN][ExpressionSequence[MINUS][ExpressionSequence[Term[INT_NUMBER]]]][RPAREN]][PLUS][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]][Statements[Statement[LoopingStatement[ForLoop[FOR][IDENTIFIER][COLON][EQUAL][ExpressionSequence[Term[INT_NUMBER]]][ForLoopTo[TO][ExpressionSequence[Term[IDENTIFIER]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][PLUS][ExpressionSequence[Term[IDENTIFIER]]]]][SEMICOLON]]]][END]][SEMICOLON]]]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][DIVIDE][ExpressionSequence[Term[IDENTIFIER]]]]][SEMICOLON]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]][COMMA][WriteIdentifierList[WriteIdentifier[IDENTIFIER]]]][RPAREN][SEMICOLON]]]]]]]]][END][DOT]]]
=======================================
Test Case 13
program NumberOfDigits;
var
  number, count: Integer;
  flag : boolean; 
begin
  write("Enter a number:");
  read(number);
  count := 0;
  while number <> 0 do
  begin
    if flag  then
    begin
      count:=count+1;
      flag := false;
    end
    else 
    begin
     count :=count;
    end; 
    number := number / 10;
  end;
  write("The number of digits is: ");
  write(count);
end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 11 ::> flag -> Variable not set

Line: 14 ::> false -> Variable not declared

Line: 14 ::> flag -> Invalid data type for assignment

Line: 20 ::> number -> Invalid data type for assignment


Parsing completed successfully


[Root[ProgramDeclaration[PROGRAM][IDENTIFIER][SEMICOLON]][VariableDeclaration[VAR][DeclarationLists[DeclarationList[MultipleVariable[IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER]][COLON][Datatype[Integer]][SEMICOLON]]][DeclarationLists[DeclarationList[SingleVariable[IDENTIFIER][COLON][Datatype[Boolean]][SEMICOLON]]]]]][BodyOfProgram[BEGIN][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]][Statements[Statement[ReadStatement[READ][LPAREN][IDENTIFIER][RPAREN][SEMICOLON]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[INT_NUMBER]]]][SEMICOLON]]][Statements[Statement[LoopingStatement[WhileLoop[WHILE][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]][Relop[NOTEQUALS]][ExpressionSequence[Term[INT_NUMBER]]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[ConditionalStatement[IF][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][PLUS][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]]][SEMICOLON]]]]][END]][ELSE][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]]][SEMICOLON]]]][END]][SEMICOLON]]][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][DIVIDE][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]]]][END]][SEMICOLON]]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]]][RPAREN][SEMICOLON]]]]]]]]][END][DOT]]]
=======================================
Test Case 14
program NumberOfDigits;
var
  number, count: Integer;
begin
  write("Enter a number:");
  read(number);
  count := 0;
  while number <> 0 do
  begin
    if number <> 0 then
    begin
      count:=count+1;
    end
    else 
    begin
     count :=count;
    end; 
    number := number / 10;
  end;
  write("The number of digits is: ");
  write(count);
end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc


Line: 18 ::> number -> Invalid data type for assignment


Parsing completed successfully


[Root[ProgramDeclaration[PROGRAM][IDENTIFIER][SEMICOLON]][VariableDeclaration[VAR][DeclarationLists[DeclarationList[MultipleVariable[IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER]][COLON][Datatype[Integer]][SEMICOLON]]]]][BodyOfProgram[BEGIN][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]][Statements[Statement[ReadStatement[READ][LPAREN][IDENTIFIER][RPAREN][SEMICOLON]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[INT_NUMBER]]]][SEMICOLON]]][Statements[Statement[LoopingStatement[WhileLoop[WHILE][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]][Relop[NOTEQUALS]][ExpressionSequence[Term[INT_NUMBER]]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[ConditionalStatement[IF][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]][Relop[NOTEQUALS]][ExpressionSequence[Term[INT_NUMBER]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][PLUS][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]]][END]][ELSE][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]]][SEMICOLON]]]][END]][SEMICOLON]]][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][DIVIDE][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]]]][END]][SEMICOLON]]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]]][RPAREN][SEMICOLON]]]]]]]]][END][DOT]]]
=======================================
Test Case 15
program MaxValueArray;
var
  numbers: array[1..10] of Integer;
  i, j, maxValue: Integer;
begin
  write("Enter 10 integer values:");
  for i := 1 to 10 do
  begin
    read(numbers[i]);
  end;
  j := 1; 
  maxValue := numbers[1];
  for i := j+2 to j+5 do
  begin
    if numbers[i] <> maxValue then
    begin
      maxValue := numbers[i];
    end;
  end;
 
  write("The value is ");  
  write(maxValue);
end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc

========
Symbol Table:
========
    ID Name    | Data Type |   Value   

        numbers|       int|         0
       maxvalue|        int|          0
              j|        int|          0
              i|        int|          0
========
Symbol Table:
========
    ID Name    | Data Type |   Value   

        numbers|       int|         0
       maxvalue|        int|          0
              j|        int|          0
              i|        int|          1

Line: 15 ::> numbers[0] -> Array index out of bounds

Line: 17 ::> numbers[0] -> Array index out of bounds


Parsing completed successfully


[Root[ProgramDeclaration[PROGRAM][IDENTIFIER][SEMICOLON]][VariableDeclaration[VAR][DeclarationLists[DeclarationList[ArrayDeclaration[IDENTIFIER][COLON][ARRAY][Leftbracket][INT_NUMBER][DOTDOT][INT_NUMBER][Rightbracket][OF][Datatype[Integer]][SEMICOLON]]][DeclarationLists[DeclarationList[MultipleVariable[IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER]]][COLON][Datatype[Integer]][SEMICOLON]]]]]][BodyOfProgram[BEGIN][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]][Statements[Statement[LoopingStatement[ForLoop[FOR][IDENTIFIER][COLON][EQUAL][ExpressionSequence[Term[INT_NUMBER]]][ForLoopTo[TO][ExpressionSequence[Term[INT_NUMBER]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[ReadStatement[READ][LPAREN][IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]][RPAREN][SEMICOLON]]]][END]][SEMICOLON]]]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[INT_NUMBER]]]][SEMICOLON]]][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[INT_NUMBER]][Rightbracket]]]]][SEMICOLON]]][Statements[Statement[LoopingStatement[ForLoop[FOR][IDENTIFIER][COLON][EQUAL][ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][PLUS][ExpressionSequence[Term[INT_NUMBER]]]][ForLoopTo[TO][ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][PLUS][ExpressionSequence[Term[INT_NUMBER]]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[ConditionalStatement[IF][AnyExpression[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]][Relop[NOTEQUALS]][ExpressionSequence[Term[IDENTIFIER]]]][THEN][BodyOfConditional[BEGINK][StatementsInsideConditional[StatementInsideConditional[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[IDENTIFIER][ArrayAddOn[BetweenBrackets[IDENTIFIER]][Rightbracket]]]]][SEMICOLON]]]][END]][SEMICOLON]]]][END]][SEMICOLON]]]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[STRING]]][RPAREN][SEMICOLON]]][Statements[Statement[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]]][RPAREN][SEMICOLON]]]]]]]]]][END][DOT]]]
=======================================
Test Case 16
program ArrayAverage;
var
  grade : char ;
  isready : boolean ;
  numbers : array [1..10] of Integer ;
  number, i, sum : Integer;
  maxValue : real;
  // the programs starts here
begin
  number := 10;
  while number <> 0 do
  begin
   write(number, " | ");
   number := number - 1;
  end;
  // the program ends here
end.
Deleting old files
Compiling yacc program
Compiling lex program
Compiling the program in gcc



Parsing completed successfully


[Root[ProgramDeclaration[PROGRAM][IDENTIFIER][SEMICOLON]][VariableDeclaration[VAR][DeclarationLists[DeclarationList[SingleVariable[IDENTIFIER][COLON][Datatype[Char]][SEMICOLON]]][DeclarationLists[DeclarationList[SingleVariable[IDENTIFIER][COLON][Datatype[Boolean]][SEMICOLON]]][DeclarationLists[DeclarationList[ArrayDeclaration[IDENTIFIER][COLON][ARRAY][Leftbracket][INT_NUMBER][DOTDOT][INT_NUMBER][Rightbracket][OF][Datatype[Integer]][SEMICOLON]]][DeclarationLists[DeclarationList[MultipleVariable[IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER][MoreIdentifiers[COMMA][IDENTIFIER]]][COLON][Datatype[Integer]][SEMICOLON]]][DeclarationLists[DeclarationList[SingleVariable[IDENTIFIER][COLON][Datatype[Real]][SEMICOLON]]]]]]]]][BodyOfProgram[BEGIN][Statements[Statement[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[Term[INT_NUMBER]]]][SEMICOLON]]][Statements[Statement[LoopingStatement[WhileLoop[WHILE][AnyExpression[ExpressionSequence[Term[IDENTIFIER]]][Relop[NOTEQUALS]][ExpressionSequence[Term[INT_NUMBER]]]][DO][BodyOfLoop[BEGINK][StatementsInsideLoop[StatementInsideLoop[WriteStatement[WRITE][LPAREN][WriteIdentifierList[WriteIdentifier[IDENTIFIER]][COMMA][WriteIdentifierList[WriteIdentifier[STRING]]]][RPAREN][SEMICOLON]]][StatementsInsideLoop[StatementInsideLoop[AssignmentStatement[IDENTIFIER][COLON][EQUAL][AnyExpression[ExpressionSequence[ExpressionSequence[Term[IDENTIFIER]]][MINUS][ExpressionSequence[Term[INT_NUMBER]]]]][SEMICOLON]]]]][END]][SEMICOLON]]]]]][END][DOT]]]
